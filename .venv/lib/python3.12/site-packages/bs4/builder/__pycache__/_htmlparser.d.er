##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/bs4/builder/_htmlparser.py 1752607605 17872

.___v_desugar_1: Never
.annotations: Never
.__license__: {"MIT"}
.__all__: global::List!({"HTMLParserTreeBuilder"}, 1)
.___v_desugar_2: Never
.HTMLParser: Never
.___v_desugar_3: Never
.Any: Never
.Callable: Never
.cast: Never
.Dict: Never
.Iterable: Never
.List: Never
.Optional: Never
.TYPE_CHECKING: Never
.Tuple: Never
.Type: Never
.Union: Never
.___v_desugar_4 = pyimport "element"
.element = pyimport "element"
.AttributeDict: {element.AttributeDict}
.CData: {element.CData}
.Comment: {element.Comment}
.Declaration: {element.Declaration}
.Doctype: {element.Doctype}
.ProcessingInstruction: {element.ProcessingInstruction}
.___v_desugar_5 = pyimport "dammit"
.dammit = pyimport "dammit"
.EntitySubstitution: {bs4.dammit.EntitySubstitution}
.UnicodeDammit: {bs4.dammit.UnicodeDammit}
.___v_desugar_6 = pyimport "__init__"
.__init__ = pyimport "__init__"
.DetectsXMLParsedAsHTML: {__init__.DetectsXMLParsedAsHTML}
.HTML: {"html"}
.HTMLTreeBuilder: {__init__.HTMLTreeBuilder}
.STRICT: {"strict"}
.___v_desugar_7 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.ParserRejectedMarkup: {bs4.exceptions.ParserRejectedMarkup}

.___v_desugar_8 = pyimport "__init__"

.BeautifulSoup: {bs4.BeautifulSoup}
.___v_desugar_9 = pyimport "element"

.NavigableString: {element.NavigableString}
.___v_desugar_10 = pyimport "_typing"
._typing = pyimport "_typing"
._Encoding: Never
._Encodings: Never
._RawMarkup: Never


.HTMLPARSER: {"html.parser"}
._DuplicateAttributeHandler: Never
.BeautifulSoupHTMLParser: ClassType
.BeautifulSoupHTMLParser <: Never
.BeautifulSoupHTMLParser.on_duplicate_attribute: Never
.BeautifulSoupHTMLParser.attribute_dict_class: Never
.BeautifulSoupHTMLParser.already_closed_empty_element: global::List!(Str, _: Nat)
bs4 = pyimport "bs4"
.BeautifulSoupHTMLParser.soup: bs4.BeautifulSoup
.BeautifulSoupHTMLParser.__call__: (soup: bs4.BeautifulSoup, *args: Obj, on_duplicate_attribute: Obj := Obj, **kwargs := Obj) -> _htmlparser.BeautifulSoupHTMLParser
.BeautifulSoupHTMLParser.REPLACE: {"replace"}
.BeautifulSoupHTMLParser.IGNORE: {"ignore"}
.BeautifulSoupHTMLParser.error: (self: _htmlparser.BeautifulSoupHTMLParser, message: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_startendtag: (self: _htmlparser.BeautifulSoupHTMLParser, name: Str, attrs: global::List!(global::Tuple((Str, NoneType or Str)), _: Nat)) -> NoneType
.BeautifulSoupHTMLParser.handle_starttag: (self: _htmlparser.BeautifulSoupHTMLParser, name: Str, attrs: global::List!(global::Tuple((Str, NoneType or Str)), _: Nat), handle_empty_element: Bool := Bool) -> NoneType
.BeautifulSoupHTMLParser.handle_endtag: (self: _htmlparser.BeautifulSoupHTMLParser, name: Str, check_already_closed: Bool := Bool and Bool) -> NoneType
.BeautifulSoupHTMLParser.handle_data: (self: _htmlparser.BeautifulSoupHTMLParser, data: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_charref: (self: _htmlparser.BeautifulSoupHTMLParser, name: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_entityref: (self: _htmlparser.BeautifulSoupHTMLParser, name: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_comment: (self: _htmlparser.BeautifulSoupHTMLParser, data: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_decl: (self: _htmlparser.BeautifulSoupHTMLParser, data: Str) -> NoneType
.BeautifulSoupHTMLParser.unknown_decl: (self: _htmlparser.BeautifulSoupHTMLParser, data: Str) -> NoneType
.BeautifulSoupHTMLParser.handle_pi: (self: _htmlparser.BeautifulSoupHTMLParser, data: Str) -> NoneType

.HTMLParserTreeBuilder: ClassType
.HTMLParserTreeBuilder <: __init__.HTMLTreeBuilder
.HTMLParserTreeBuilder.parser_args: Never
.HTMLParserTreeBuilder.__call__: Never
.HTMLParserTreeBuilder.is_xml: Bool
.HTMLParserTreeBuilder.picklable: Bool
.HTMLParserTreeBuilder.NAME: {"html.parser"}
.HTMLParserTreeBuilder.features: global::Iterable(Str)
.HTMLParserTreeBuilder.TRACKS_LINE_NUMBERS: {True}
.HTMLParserTreeBuilder.prepare_markup: Never
.HTMLParserTreeBuilder.feed: (self: _htmlparser.HTMLParserTreeBuilder, markup: Obj) -> NoneType

