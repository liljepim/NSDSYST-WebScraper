##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/bs4/element.py 1752607605 109768
.___v_desugar_1: Never
.annotations: Never
.__license__: {"MIT"}
.re: Never

.warnings: Never

.___v_desugar_2 = pyimport "css"
.css = pyimport "css"
.CSS: Never
.___v_desugar_3 = pyimport "_deprecation"
._deprecation = pyimport "_deprecation"
._deprecated: (replaced_by: Str, version: Str) -> Never
._deprecated_alias: (old_name: Str, new_name: Str, version: Str) -> (self: Obj) -> Never
._deprecated_function_alias: (old_name: Str, new_name: Str, version: Str) -> (Never) -> Never
.___v_desugar_4 = pyimport "formatter"
.formatter = pyimport "formatter"
.Formatter: Never
.HTMLFormatter: Never
.XMLFormatter: Never
.___v_desugar_5 = pyimport "_warnings"
._warnings = pyimport "_warnings"
.AttributeResemblesVariableWarning: {bs4._warnings.AttributeResemblesVariableWarning}
.___v_desugar_6: Never
.Any: Never
.Callable: Never
.Dict: Never
.Generic: Never
.Iterable: Never
.Iterator: Never
.List: Never
.Mapping: Never
.Optional: Never
.Pattern: Never
.Set: Never
.TYPE_CHECKING: Never
.Tuple: Never
.Type: Never
.TypeVar: Never
.Union: Never
.cast: Never
.___v_desugar_7 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Self: Never
.TypeAlias: Never

.___v_desugar_8 = pyimport "__init__"
.__init__ = pyimport "__init__"
.BeautifulSoup: {bs4.BeautifulSoup}
.___v_desugar_9 = pyimport "__init__"

.TreeBuilder: {__init__.TreeBuilder}
.___v_desugar_10 = pyimport "filter"
.filter = pyimport "filter"
.ElementFilter: Never
.___v_desugar_11 = pyimport "formatter"

._EntitySubstitutionFunction: Never
._FormatterOrName: Never
.___v_desugar_12 = pyimport "_typing"
._typing = pyimport "_typing"
._AtMostOneElement: Never
._AttributeValue: Never
._AttributeValues: Never
._Encoding: Never
._InsertableElement: Never
._OneElement: Never
._QueryResults: Never
._RawOrProcessedAttributeValues: Never
._StrainableElement: Never
._StrainableAttribute: Never
._StrainableAttributes: Never
._StrainableString: Never


._OneOrMoreStringTypes: Never
._FindMethodName: Never
._deprecated_names: global::GenericDict
._deprecated_whitespace_re: Never
.__getattr__: (name: Str) -> Never
.DEFAULT_OUTPUT_ENCODING: {"utf-8"}
.nonwhitespace_re: Never
.PYTHON_SPECIFIC_ENCODINGS: Never
.NamespacedAttribute: ClassType
.NamespacedAttribute <: Str
.NamespacedAttribute.prefix: Never
.NamespacedAttribute.namespace: Never
.NamespacedAttribute.name: Never
.NamespacedAttribute.__new__: (cls: Obj, prefix: NoneType or Str, name: NoneType or Str := NoneType or Str, namespace: NoneType or Str := NoneType or Str) -> element.NamespacedAttribute

.AttributeValueWithCharsetSubstitution: ClassType
.AttributeValueWithCharsetSubstitution <: Str
.AttributeValueWithCharsetSubstitution.original_value: Str
.AttributeValueWithCharsetSubstitution.substitute_encoding: (self: element.AttributeValueWithCharsetSubstitution, eventual_encoding: Str) -> Str

.CharsetMetaAttributeValue: ClassType
element = pyimport "element"
.CharsetMetaAttributeValue <: .AttributeValueWithCharsetSubstitution
.CharsetMetaAttributeValue.__new__: (cls: Obj, original_value: Str) -> element.CharsetMetaAttributeValue
.CharsetMetaAttributeValue.substitute_encoding: (self: element.CharsetMetaAttributeValue, eventual_encoding: Obj := Obj) -> Str

.AttributeValueList: ClassType
.AttributeValueList <: global::List!(Str, _: Nat)

.AttributeDict: ClassType
.AttributeDict <: Never

.XMLAttributeDict: ClassType
.XMLAttributeDict <: .AttributeDict
.XMLAttributeDict.__setitem__: (self: element.XMLAttributeDict, key: Str, value: Obj) -> NoneType

.HTMLAttributeDict: ClassType
.HTMLAttributeDict <: .AttributeDict
.HTMLAttributeDict.__setitem__: (self: element.HTMLAttributeDict, key: Str, value: Obj) -> NoneType

.ContentMetaAttributeValue: ClassType
.ContentMetaAttributeValue <: .AttributeValueWithCharsetSubstitution
.ContentMetaAttributeValue.CHARSET_RE: Never
.ContentMetaAttributeValue.__new__: |Type_124212: Type, Type_122388 <: Structural({.CHARSET_RE = ?124212})|(cls: Type_122388, original_value: Str) -> element.ContentMetaAttributeValue
.ContentMetaAttributeValue.substitute_encoding: (self: element.ContentMetaAttributeValue, eventual_encoding: Obj := Obj) -> Str

.PageElement: ClassType
.PageElement <: Obj
.PageElement.next_sibling: Never
.PageElement.parent: Never
.PageElement.previous_element: Never
.PageElement.previous_sibling: Never
.PageElement._decomposed: Bool
.PageElement.next_element: Never
.PageElement.known_xml: NoneType or Bool
.PageElement.hidden: Bool
.PageElement.setup: (self: element.PageElement, parent: Obj := Obj, previous_element: Obj := Obj, next_element: Obj := Obj, previous_sibling: Obj := Obj, next_sibling: Obj := Obj) -> NoneType
.PageElement.format_string: (self: element.PageElement, s: Str, formatter: Obj) -> Str
.PageElement.formatter_for_name: (self: element.PageElement, formatter_name: Obj) -> Never
.PageElement._is_xml : (self: element.PageElement) -> Bool
.PageElement._is_xml: Never
.PageElement.nextSibling: (self: Obj) -> Never
.PageElement.previousSibling: (self: Obj) -> Never
.PageElement.__deepcopy__: Never
.PageElement.__copy__: (self: element.PageElement) -> element.PageElement
.PageElement.default: Never
.PageElement._all_strings: (self: element.PageElement, strip: Bool := Bool, types: global::Iterable(_: Type) := global::Iterable(_: Type)) -> global::Iterator(Str)
.PageElement.stripped_strings : (self: element.PageElement) -> global::Iterator(Str)
.PageElement.stripped_strings: Never
.PageElement.get_text: (self: element.PageElement, separator: Str := Str, strip: Bool := Bool, types: global::Iterable(_: Type) := global::Iterable(_: Type)) -> Str
.PageElement.getText: (self: element.PageElement, separator: Str := Str, strip: Bool := Bool, types: global::Iterable(_: Type) := global::Iterable(_: Type)) -> Str
.PageElement.text: Never
.PageElement.replace_with: (self: element.PageElement, *args: element.PageElement) -> element.PageElement
.PageElement.replaceWith: (Obj) -> Never
.PageElement.wrap: (self: element.PageElement, wrap_inside: Obj) -> Never
.PageElement.extract: (self: element.PageElement, _self_index: NoneType or Int := NoneType or Int) -> element.PageElement
.PageElement.decompose: (self: element.PageElement) -> NoneType
.PageElement._last_descendant: (self: element.PageElement, is_initialized: Bool := Bool and Bool, accept_self: Bool := Bool and Bool) -> Never
.PageElement._lastRecursiveChild: (self: Obj) -> Never
.PageElement.insert_before: (self: element.PageElement, *args: Obj) -> global::List!(element.PageElement, _: Nat)
.PageElement.insert_after: (self: element.PageElement, *args: Obj) -> global::List!(element.PageElement, _: Nat)
.PageElement.find_next: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, **kwargs := Obj) -> Never
.PageElement.findNext: (Obj) -> Never
.PageElement.find_all_next: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.findAllNext: (Obj) -> Never
.PageElement.find_next_sibling: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, **kwargs := Obj) -> Never
.PageElement.findNextSibling: (Obj) -> Never
.PageElement.find_next_siblings: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.findNextSiblings: (Obj) -> Never
.PageElement.fetchNextSiblings: (Obj) -> Never
.PageElement.find_previous: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, **kwargs := Obj) -> Never
.PageElement.findPrevious: (Obj) -> Never
.PageElement.find_all_previous: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.findAllPrevious: (Obj) -> Never
.PageElement.fetchAllPrevious: (Obj) -> Never
.PageElement.find_previous_sibling: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, **kwargs := Obj) -> Never
.PageElement.findPreviousSibling: (Obj) -> Never
.PageElement.find_previous_siblings: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, string: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.findPreviousSiblings: (Obj) -> Never
.PageElement.fetchPreviousSiblings: (Obj) -> Never
.PageElement.find_parent: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, **kwargs := Obj) -> Never
.PageElement.findParent: (Obj) -> Never
.PageElement.find_parents: (self: element.PageElement, name: Obj := Obj, attrs: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.findParents: (Obj) -> Never
.PageElement.fetchParents: (Obj) -> Never
.PageElement.next : (self: element.PageElement) -> Never
.PageElement.next: Never
.PageElement.previous : (self: element.PageElement) -> Never
.PageElement.previous: Never
.PageElement._find_one: (self: element.PageElement, method: Obj, name: Obj, attrs: Obj, string: Obj, **kwargs := Obj) -> Never
.PageElement._find_all: (self: element.PageElement, name: Obj, attrs: Obj, string: Obj, limit: NoneType or Int, generator: global::Iterator(element.PageElement), _stacklevel: Int := Int, **kwargs := Obj) -> Never
.PageElement.next_elements : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.next_elements: Never
.PageElement.self_and_next_elements : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.self_and_next_elements: Never
.PageElement.next_siblings : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.next_siblings: Never
.PageElement.self_and_next_siblings : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.self_and_next_siblings: Never
.PageElement.previous_elements : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.previous_elements: Never
.PageElement.self_and_previous_elements : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.self_and_previous_elements: Never
.PageElement.previous_siblings : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.previous_siblings: Never
.PageElement.self_and_previous_siblings : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.self_and_previous_siblings: Never
.PageElement.parents : Never
.PageElement.parents: Never
.PageElement.self_and_parents : (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.self_and_parents: Never
.PageElement._self_and: (self: element.PageElement, other_generator: global::Iterator(element.PageElement)) -> global::Iterator(element.PageElement)
.PageElement.decomposed : (self: element.PageElement) -> Bool
.PageElement.decomposed: Never
.PageElement.nextGenerator: (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.nextSiblingGenerator: (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.previousGenerator: (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.previousSiblingGenerator: (self: element.PageElement) -> global::Iterator(element.PageElement)
.PageElement.parentGenerator: (self: element.PageElement) -> global::Iterator(element.PageElement)

.NavigableString: ClassType
.NavigableString <: Str
.NavigableString.PREFIX: {""}
.NavigableString.SUFFIX: {""}
.NavigableString.__new__: (cls: Obj, value: global::Bytes or Str) -> element.NavigableString
.NavigableString.__deepcopy__: Never
.NavigableString.__getnewargs__: (self: element.NavigableString) -> global::Tuple([Str])
.NavigableString.__getitem__: (self: element.NavigableString, key: Obj) -> Str
.NavigableString.string : (self: element.NavigableString) -> Str
.NavigableString.string: Str
.NavigableString.output_ready: (self: element.NavigableString, formatter: Obj := Obj) -> Str
.NavigableString.name : (self: element.NavigableString) -> NoneType
.NavigableString.name: NoneType
.NavigableString.name: Never
.NavigableString._all_strings: (self: element.NavigableString, strip: Bool := Bool, types: Obj := Obj) -> global::Iterator(Str)
.NavigableString.strings : (self: element.NavigableString) -> global::Iterator(Str)
.NavigableString.strings: global::Iterator(Str)

.PreformattedString: ClassType
.PreformattedString <: .NavigableString
.PreformattedString.PREFIX: {""}
.PreformattedString.SUFFIX: {""}
.PreformattedString.output_ready: (self: element.PreformattedString, formatter: Obj := Obj) -> Str

.CData: ClassType
.CData <: .PreformattedString
.CData.PREFIX: {"<![CDATA["}
.CData.SUFFIX: {"]]>"}

.ProcessingInstruction: ClassType
.ProcessingInstruction <: .PreformattedString
.ProcessingInstruction.PREFIX: {"<?"}
.ProcessingInstruction.SUFFIX: {">"}

.XMLProcessingInstruction: ClassType
.XMLProcessingInstruction <: .ProcessingInstruction
.XMLProcessingInstruction.PREFIX: {"<?"}
.XMLProcessingInstruction.SUFFIX: {"?>"}

.Comment: ClassType
.Comment <: .PreformattedString
.Comment.PREFIX: {"<!--"}
.Comment.SUFFIX: {"-->"}

.Declaration: ClassType
.Declaration <: .PreformattedString
.Declaration.PREFIX: {"<?"}
.Declaration.SUFFIX: {"?>"}

.Doctype: ClassType
.Doctype <: .PreformattedString
.Doctype.for_name_and_ids: |Type_125139: Type, Type_125137: Type, Type_125136: Type, Type_122529 <: Structural({._string_for_name_and_ids = (self: Obj, ?125136, ?125137, ?125138) -> ?125139}), Type_125138: Type|(cls: Type_122529, name: Str, pub_id: NoneType or Str, system_id: NoneType or Str) -> element.Doctype
.Doctype._string_for_name_and_ids: (self: element.Doctype, name: Str, pub_id: NoneType or Str, system_id: NoneType or Str) -> Str
.Doctype.PREFIX: {"<!DOCTYPE "}
.Doctype.SUFFIX: {">\n"}

.Stylesheet: ClassType
.Stylesheet <: .NavigableString

.Script: ClassType
.Script <: .NavigableString

.TemplateString: ClassType
.TemplateString <: .NavigableString

.RubyTextString: ClassType
.RubyTextString <: .NavigableString

.RubyParenthesisString: ClassType
.RubyParenthesisString <: .NavigableString

.Tag: ClassType
.Tag <: .PageElement
.Tag.sourcepos: Never
.Tag.contents: global::List!(element.PageElement, _: Nat)
.Tag.parser_class: Never
.Tag.interesting_string_types: Never
.Tag.cdata_list_attributes: Never
.Tag.name: Str
.Tag.prefix: Never
.Tag.sourceline: Never
.Tag.namespace: Never
.Tag.can_be_empty_element: Never
.Tag.preserve_whitespace_tags: Never
.Tag._namespaces: Never
.Tag.hidden: Bool
.Tag.attribute_value_list_class: Never
.Tag.attrs: Never
.Tag.known_xml: Never
.Tag.__call__: (self: Obj, name: NoneType or bs4.BeautifulSoup := NoneType or bs4.BeautifulSoup, attrs: __init__.TreeBuilder or NoneType := __init__.TreeBuilder or NoneType, recursive: Bool := Bool, string: NoneType or Str := NoneType or Str, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> element.Tag
.Tag.parserClass: (self: Obj) -> Never
.Tag.__deepcopy__: Never
.Tag.copy_self: (self: element.Tag) -> element.Tag
.Tag.is_empty_element : (self: element.Tag) -> Bool
.Tag.is_empty_element: Bool
.Tag.isSelfClosing: (self: element.Tag) -> Bool
.Tag.string : (self: element.Tag) -> NoneType or Str
.Tag.string: NoneType or Str
.Tag.MAIN_CONTENT_STRING_TYPES: Never
.Tag._all_strings: (self: element.Tag, strip: Bool := Bool, types: Obj := Obj) -> global::Iterator(Str)
.Tag.strings: Never
.Tag.insert: (self: element.Tag, position: Int, *new_children: Obj) -> global::List!(element.PageElement, _: Nat)
.Tag._insert: (self: element.Tag, position: Int, new_child: Obj) -> global::List!(element.PageElement, _: Nat)
.Tag.unwrap: (self: element.Tag) -> element.Tag
.Tag.replace_with_children: (self: element.Tag) -> element.Tag
.Tag.replaceWithChildren: (self: element.Tag) -> Never
.Tag.append: (self: element.Tag, tag: Obj) -> element.PageElement
.Tag.extend: Never
.Tag.clear: (self: element.Tag, decompose: Bool := Bool) -> NoneType
.Tag.smooth: (self: element.Tag) -> NoneType
.Tag.index: (self: element.Tag, element: element.PageElement) -> Int
.Tag.get: (self: element.Tag, key: Str, default: Obj := Obj) -> Never
.Tag.get_attribute_list: (self: element.Tag, key: Str, default: NoneType or element.AttributeValueList := NoneType or element.AttributeValueList) -> element.AttributeValueList
.Tag.has_attr: (self: element.Tag, key: Str) -> Bool
.Tag.__hash__: (self: element.Tag) -> Int
.Tag.__getitem__: (self: element.Tag, key: Str) -> Never
.Tag.__iter__: (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.__len__: (self: element.Tag) -> Int
.Tag.__contains__: (self: element.Tag, x: Obj) -> Bool
.Tag.__bool__: (self: element.Tag) -> Bool
.Tag.__setitem__: (self: element.Tag, key: Str, value: Obj) -> NoneType
.Tag.__delitem__: (self: element.Tag, key: Str) -> NoneType
.Tag.__call__: (self: Obj, name: NoneType or bs4.BeautifulSoup := NoneType or bs4.BeautifulSoup, attrs: __init__.TreeBuilder or NoneType := __init__.TreeBuilder or NoneType, recursive: Bool := Bool, string: NoneType or Str := NoneType or Str, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> element.Tag
.Tag.__getattr__: (self: element.Tag, subtag: Str) -> NoneType or element.Tag
.Tag.__eq__: (self: element.Tag, other: Obj) -> Bool
.Tag.__ne__: (self: element.Tag, other: Obj) -> Bool
.Tag.__repr__: (self: element.Tag) -> Str
.Tag.encode: (self: element.Tag, encoding: Obj := Obj, indent_level: NoneType or Int := NoneType or Int, formatter: Obj := Obj, errors: Str := Str) -> global::Bytes
.Tag.decode: (self: element.Tag, indent_level: NoneType or Int := {None} and NoneType or Int, eventual_encoding: Obj := Obj, formatter: Obj := Obj, iterator: global::Iterator(element.PageElement) or NoneType := {None} and global::Iterator(element.PageElement) or NoneType) -> Str
.Tag.START_ELEMENT_EVENT: Never
.Tag.END_ELEMENT_EVENT: Never
.Tag.EMPTY_ELEMENT_EVENT: Never
.Tag.STRING_ELEMENT_EVENT: Never
.Tag._event_stream: Never
.Tag._indent_string: (self: element.Tag, s: Str, indent_level: Int, formatter: Obj, indent_before: Bool, indent_after: Bool) -> Str
.Tag._format_tag: (self: element.Tag, eventual_encoding: Str, formatter: Obj, opening: Bool) -> Str
.Tag._should_pretty_print: (self: element.Tag, indent_level: Int := Int) -> Bool
.Tag.prettify: (self: element.Tag, encoding: Obj := Obj, formatter: Obj := Obj) -> global::Bytes or Str
.Tag.decode_contents: (self: element.Tag, indent_level: NoneType or Int := NoneType or Int, eventual_encoding: Obj := Obj, formatter: Obj := Obj) -> Str
.Tag.encode_contents: (self: element.Tag, indent_level: NoneType or Int := NoneType or Int, encoding: Obj := Obj, formatter: Obj := Obj) -> global::Bytes
.Tag.renderContents: (self: element.Tag, encoding: Obj := Obj, prettyPrint: Bool := Bool, indentLevel: NoneType or Int := NoneType or Int) -> global::Bytes
.Tag.find: (self: element.Tag, name: Obj := Obj, attrs: Obj := Obj, recursive: Bool := Bool and Bool, string: Obj := Obj, **kwargs := Obj) -> Never
.Tag.findChild: (Obj) -> Never
.Tag.find_all: (self: element.Tag, name: Obj := Obj, attrs: Obj := Obj, recursive: Bool := Bool, string: Obj := Obj, limit: NoneType or Int := NoneType or Int, _stacklevel: Int := Int, **kwargs := Obj) -> Never
.Tag.findAll: (Obj) -> Never
.Tag.findChildren: (Obj) -> Never
.Tag.children : (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.children: global::Iterator(element.PageElement)
.Tag.self_and_descendants : (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.self_and_descendants: global::Iterator(element.PageElement)
.Tag.descendants : (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.descendants: global::Iterator(element.PageElement)
.Tag.select_one: (self: element.Tag, selector: Str, namespaces: global::Dict!({Str: Str}) or NoneType := global::Dict!({Str: Str}) or NoneType, **kwargs := Obj) -> NoneType or element.Tag
.Tag.select: (self: element.Tag, selector: Str, namespaces: global::Dict!({Str: Str}) or NoneType := global::Dict!({Str: Str}) or NoneType, limit: Int := Int, **kwargs := Obj) -> Never
.Tag.css : (self: element.Tag) -> Never
.Tag.css: Never
.Tag.childGenerator: (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.recursiveChildGenerator: (self: element.Tag) -> global::Iterator(element.PageElement)
.Tag.has_key: (self: element.Tag, key: Str) -> Bool

._PageElementT: Never
.ResultSet: ClassType
.ResultSet <: Never
.ResultSet.source: Never
.ResultSet.__call__: Never
.ResultSet.__getattr__: (self: element.ResultSet, key: Str) -> NoneType

.___v_desugar_15 = pyimport "filter"

.SoupStrainer: Never
