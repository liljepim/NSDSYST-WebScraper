##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/bs4/filter.py 1752607605 29031
.___v_desugar_1: Never
.annotations: Never
.___v_desugar_2: Never
.defaultdict: Never
.re: Never

.___v_desugar_3: Never
.Any: Never
.Callable: Never
.cast: Never
.Dict: Never
.Iterator: Never
.Iterable: Never
.List: Never
.Optional: Never
.Sequence: Never
.Type: Never
.Union: Never
.warnings: Never

.___v_desugar_4 = pyimport "_deprecation"
._deprecation = pyimport "_deprecation"
._deprecated: (replaced_by: Str, version: Str) -> Never
.___v_desugar_5 = pyimport "element"
.element = pyimport "element"
.AttributeDict: {element.AttributeDict}
.NavigableString: {element.NavigableString}
.PageElement: {element.PageElement}
.ResultSet: {element.ResultSet}
.Tag: {element.Tag}
.___v_desugar_6 = pyimport "_typing"
._typing = pyimport "_typing"
._AtMostOneElement: Never
._AttributeValue: Never
._OneElement: Never
._PageElementMatchFunction: Never
._QueryResults: Never
._RawAttributeValues: Never
._RegularExpressionProtocol: Never
._StrainableAttribute: Never
._StrainableElement: Never
._StrainableString: Never
._StringMatchFunction: Never
._TagMatchFunction: Never
.ElementFilter: ClassType
.ElementFilter <: Obj
.ElementFilter.match_function: Never
.ElementFilter.__call__: (match_function: Obj := Obj) -> filter.ElementFilter
.ElementFilter.includes_everything : (self: filter.ElementFilter) -> Bool
.ElementFilter.includes_everything: Bool
.ElementFilter.excludes_everything : (self: filter.ElementFilter) -> Bool
.ElementFilter.excludes_everything: Bool
.ElementFilter.match: (self: filter.ElementFilter, element: element.PageElement, _known_rules: Bool := Bool) -> Bool
.ElementFilter.filter: Never
.ElementFilter.find: (self: filter.ElementFilter, generator: global::Iterator(element.PageElement)) -> Never
.ElementFilter.find_all: (self: filter.ElementFilter, generator: global::Iterator(element.PageElement), limit: NoneType or Int := NoneType or Int) -> Never
.ElementFilter.allow_tag_creation: (self: filter.ElementFilter, nsprefix: NoneType or Str, name: Str, attrs: Obj) -> Bool
.ElementFilter.allow_string_creation: (self: filter.ElementFilter, string: Str) -> Bool

.MatchRule: ClassType
.MatchRule <: Obj
.MatchRule.pattern: Never
.MatchRule.string: Never
.MatchRule.exclude_everything: Never
.MatchRule.present: Never
.MatchRule.function: Never
.MatchRule.__call__: (string: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, pattern: Obj := Obj, function: Obj := Obj, present: NoneType or Bool := NoneType or Bool, exclude_everything: NoneType or Bool := NoneType or Bool) -> filter.MatchRule
.MatchRule._base_match: (self: filter.MatchRule, string: NoneType or Str) -> NoneType or Bool
.MatchRule.matches_string: (self: filter.MatchRule, string: NoneType or Str) -> Bool
.MatchRule.__repr__: (self: filter.MatchRule) -> Str
.MatchRule.__eq__: (self: filter.MatchRule, other: Obj) -> Bool

.TagNameMatchRule: ClassType
filter = pyimport "filter"
.TagNameMatchRule <: .MatchRule
.TagNameMatchRule.function: Never
.TagNameMatchRule.matches_tag: (self: filter.TagNameMatchRule, tag: element.Tag) -> Bool

.AttributeValueMatchRule: ClassType
.AttributeValueMatchRule <: .MatchRule
.AttributeValueMatchRule.function: Never

.StringMatchRule: ClassType
.StringMatchRule <: .MatchRule
.StringMatchRule.function: Never

.SoupStrainer: ClassType
.SoupStrainer <: .ElementFilter
.SoupStrainer.attribute_rules: Never
.SoupStrainer.string_rules: global::List!(filter.StringMatchRule, _: Nat)
.SoupStrainer.name_rules: global::List!(filter.TagNameMatchRule, _: Nat)
.SoupStrainer.__string: Never
.SoupStrainer.__call__: Never
.SoupStrainer.includes_everything : (self: filter.SoupStrainer) -> Bool
.SoupStrainer.includes_everything: Bool
.SoupStrainer.excludes_everything : (self: filter.SoupStrainer) -> Bool
.SoupStrainer.excludes_everything: Bool
.SoupStrainer.string : (self: filter.SoupStrainer) -> Never
.SoupStrainer.string: Never
.SoupStrainer.text : (self: filter.SoupStrainer) -> Never
.SoupStrainer.text: Never
.SoupStrainer.__repr__: (self: filter.SoupStrainer) -> Str
.SoupStrainer._make_match_rules: |Type_123327: Type, T: Type, Type_123651: Type, Type_123326 <: Structural({._make_match_rules = (self: Obj, ?T, ?123327) -> ?123651})|(cls: Type_123326, obj: Obj, rule_class: Type_123327) -> global::Iterator(filter.MatchRule)
.SoupStrainer.matches_tag: (self: filter.SoupStrainer, tag: element.Tag) -> Bool
.SoupStrainer._attribute_match: (self: filter.SoupStrainer, attr_value: Obj, rules: global::Iterable(filter.AttributeValueMatchRule)) -> Bool
.SoupStrainer.allow_tag_creation: (self: filter.SoupStrainer, nsprefix: NoneType or Str, name: Str, attrs: Obj) -> Bool
.SoupStrainer.allow_string_creation: (self: filter.SoupStrainer, string: Str) -> Bool
.SoupStrainer.matches_any_string_rule: (self: filter.SoupStrainer, string: Str) -> Bool
.SoupStrainer.match: (self: filter.SoupStrainer, element: element.PageElement, _known_rules: Bool := Bool) -> Bool
.SoupStrainer.search_tag: (self: filter.SoupStrainer, name: Str, attrs: Obj) -> Bool
.SoupStrainer.search: (self: filter.SoupStrainer, element: element.PageElement) -> NoneType or element.PageElement

