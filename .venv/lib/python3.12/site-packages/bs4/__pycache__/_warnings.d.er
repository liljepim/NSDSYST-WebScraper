##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/bs4/_warnings.py 1752607605 4711

.GuessedAtParserWarning: ClassType
.GuessedAtParserWarning <: global::UserWarning
.GuessedAtParserWarning.MESSAGE: {"No parser was explicitly specified, so I\'m using the best available Type_(markup_type)s parser for this system (\"Type_(parser)s\"). This usually isn\'t a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line Type_(line_number)s of the file Type_(filename)s. To get rid of this warning, pass the additional argument \'features=\"Type_(parser)s\"\' to the BeautifulSoup constructor.\n"}

.UnusualUsageWarning: ClassType
.UnusualUsageWarning <: global::UserWarning

.MarkupResemblesLocatorWarning: ClassType
bs4 = pyimport "bs4"
.MarkupResemblesLocatorWarning <: bs4._warnings.UnusualUsageWarning
.MarkupResemblesLocatorWarning.GENERIC_MESSAGE: {"\n\nHowever, if you want to parse some data that happens to look like a Type_(what)s, then nothing has gone wrong: you are using Beautiful Soup correctly, and this warning is spurious and can be filtered. To make this warning go away, run this code before calling the BeautifulSoup constructor:\n\n    from bs4 import MarkupResemblesLocatorWarning\n    import warnings\n\n    warnings.filterwarnings(\"ignore\", category=MarkupResemblesLocatorWarning)\n    "}
.MarkupResemblesLocatorWarning.URL_MESSAGE: {"The input passed in on this line looks more like a URL than HTML or XML.\n\nIf you meant to use Beautiful Soup to parse the web page found at a certain URL, then something has gone wrong. You should use an Python package like \'requests\' to fetch the content behind the URL. Once you have the content as a string, you can feed that string into Beautiful Soup.\n\nHowever, if you want to parse some data that happens to look like a Type_(what)s, then nothing has gone wrong: you are using Beautiful Soup correctly, and this warning is spurious and can be filtered. To make this warning go away, run this code before calling the BeautifulSoup constructor:\n\n    from bs4 import MarkupResemblesLocatorWarning\n    import warnings\n\n    warnings.filterwarnings(\"ignore\", category=MarkupResemblesLocatorWarning)\n    "}
.MarkupResemblesLocatorWarning.FILENAME_MESSAGE: {"The input passed in on this line looks more like a filename than HTML or XML.\n\nIf you meant to use Beautiful Soup to parse the contents of a file on disk, then something has gone wrong. You should open the file first, using code like this:\n\n    filehandle = open(your filename)\n\nYou can then feed the open filehandle into Beautiful Soup instead of using the filename.\n\nHowever, if you want to parse some data that happens to look like a Type_(what)s, then nothing has gone wrong: you are using Beautiful Soup correctly, and this warning is spurious and can be filtered. To make this warning go away, run this code before calling the BeautifulSoup constructor:\n\n    from bs4 import MarkupResemblesLocatorWarning\n    import warnings\n\n    warnings.filterwarnings(\"ignore\", category=MarkupResemblesLocatorWarning)\n    "}

.AttributeResemblesVariableWarning: ClassType
.AttributeResemblesVariableWarning <: bs4._warnings.UnusualUsageWarning
.AttributeResemblesVariableWarning.MESSAGE: {"Type_(original)r is an unusual attribute name and is a common misspelling for Type_(autocorrect)r.\n\nIf you meant Type_(autocorrect)r, change your code to use it, and this warning will go away.\n\nIf you really did mean to check the Type_(original)r attribute, this warning is spurious and can be filtered. To make it go away, run this code before creating your BeautifulSoup object:\n\n    from bs4 import AttributeResemblesVariableWarning\n    import warnings\n\n    warnings.filterwarnings(\"ignore\", category=AttributeResemblesVariableWarning)\n"}

.XMLParsedAsHTMLWarning: ClassType
.XMLParsedAsHTMLWarning <: bs4._warnings.UnusualUsageWarning
.XMLParsedAsHTMLWarning.MESSAGE: {"It looks like you\'re using an HTML parser to parse an XML document.\n\nAssuming this really is an XML document, what you\'re doing might work, but you should know that using an XML parser will be more reliable. To parse this document as XML, make sure you have the Python package \'lxml\' installed, and pass the keyword argument `features=\"xml\"` into the BeautifulSoup constructor.\n\nIf you want or need to use an HTML parser on this document, you can make this warning go away by filtering it. To do that, run this code before calling the BeautifulSoup constructor:\n\n    from bs4 import XMLParsedAsHTMLWarning\n    import warnings\n\n    warnings.filterwarnings(\"ignore\", category=XMLParsedAsHTMLWarning)\n"}

