##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/requests/models.py 1752607605 35510

.datetime: Never

.encodings: Never

.___v_desugar_1: Never
.UnsupportedOperation: Never
.___v_desugar_2 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.DecodeError: {exceptions.DecodeError}
.LocationParseError: {exceptions.LocationParseError}
.ProtocolError: {exceptions.ProtocolError}
.ReadTimeoutError: {exceptions.ReadTimeoutError}
.SSLError: {exceptions.SSLError}
.___v_desugar_3 = pyimport "fields"
.fields = pyimport "fields"
.RequestField: {fields.RequestField}
.___v_desugar_4 = pyimport "filepost"
.filepost = pyimport "filepost"
.encode_multipart_formdata: (fields: Obj, boundary: NoneType or Str := NoneType or Str) -> global::Tuple([global::Bytes, Str])
.___v_desugar_5 = pyimport "__init__"
.__init__ = pyimport "__init__"
.parse_url: (url: Str) -> util.url.Url
.___v_desugar_6 = pyimport "_internal_utils"
._internal_utils = pyimport "_internal_utils"
.to_native_string: (string: global::Bytes, encoding: Str := Str) -> Str
.unicode_is_ascii: (u_string: Obj) -> Never
.___v_desugar_7 = pyimport "auth"
.auth = pyimport "auth"
.HTTPBasicAuth: Never
.___v_desugar_8 = pyimport "compat"
.compat = pyimport "compat"
.Callable: Never
.JSONDecodeError: Never
.Mapping: Never
.basestring: global::Tuple([{Str}, {global::Bytes}])
.builtin_str: {Str}
.chardet: {None}
.cookielib: Never
.___v_desugar_9 = pyimport "compat"

.complexjson: Never
.___v_desugar_10 = pyimport "compat"

.urlencode: Never
.urlsplit: Never
.urlunparse: Never
.___v_desugar_11 = pyimport "cookies"
.cookies = pyimport "cookies"
._copy_cookie_jar: (jar: global::Iterable(Never)) -> Never
.cookiejar_from_dict: |Type_105087 <: cookies.RequestsCookieJar|(cookie_dict: Obj, cookiejar: Type_105087 := Type_105087, overwrite: Structural({.__or__ = (self: Never, Obj) -> Bool}) := {True} and Structural({.__or__ = (self: Never, Obj) -> Bool})) -> Type_105087
.get_cookie_header: |Type_104989 <: Structural({.add_cookie_header = (self: Obj, ?105450) -> ?105451}), Type_105451: Type, Type_105450: Type|(jar: Type_104989, request: Obj) -> NoneType
.___v_desugar_12 = pyimport "exceptions"

.ChunkedEncodingError: {exceptions.ChunkedEncodingError}
.ConnectionError: {global::ConnectionError}
.ContentDecodingError: {exceptions.ContentDecodingError}
.HTTPError: {exceptions.HTTPError}
.InvalidJSONError: {exceptions.InvalidJSONError}
.InvalidURL: {exceptions.InvalidURL}
.___v_desugar_13 = pyimport "exceptions"

.RequestsJSONDecodeError: {exceptions.JSONDecodeError}
.___v_desugar_14 = pyimport "exceptions"

.MissingSchema: {exceptions.MissingSchema}
.___v_desugar_15 = pyimport "exceptions"

.RequestsSSLError: {exceptions.SSLError}
.___v_desugar_16 = pyimport "exceptions"

.StreamConsumedError: {exceptions.StreamConsumedError}
.___v_desugar_17 = pyimport "hooks"
.hooks = pyimport "hooks"
.default_hooks: () -> global::Dict!({Never: Never})
.___v_desugar_18 = pyimport "status_codes"
.status_codes = pyimport "status_codes"
structures = pyimport "structures"
.codes: structures.LookupDict
.___v_desugar_19 = pyimport "structures"

.CaseInsensitiveDict: {structures.CaseInsensitiveDict}
.___v_desugar_20 = pyimport "utils"
.utils = pyimport "utils"
.check_header_validity: (header: global::Indexable(Obj, Never)) -> NoneType
.get_auth_from_url: (url: Obj) -> global::Tuple([Never, Never])
.guess_filename: (obj: Obj) -> NoneType
.guess_json_utf: (data: global::Indexable(Obj, Never)) -> {None}
.iter_slices: |Type_112646 <: Structural({.__len__ = (self: Never) -> Nat})|(string: Type_112646, slice_length: Nat) -> NoneType
.parse_header_links: |V :> Str, V <: Structural({.strip = (self: Obj, ?114541) -> ?V}), Type_114541: Type, V: Type|(value: V) -> global::List!(global::Dict!({{"url"}: Str}), 1)
.requote_uri: (uri: Str) -> Never
.stream_decode_response_unicode: |Type_112644 <: Structural({.encoding = ?113810 and ?113813}), Type_113813: Type, T: Type, Type_113810: Type|(iterator: global::Iterable(T), r: Type_112644) -> NoneType or T
.super_len: (o: Str) -> {0}
.to_key_val_list: |T: Type|(value: global::Iterable(T)) -> global::List!(T, _: Nat)
.REDIRECT_STATI: Never
.DEFAULT_REDIRECT_LIMIT: {30}
.CONTENT_CHUNK_SIZE: {10240}
.ITER_CHUNK_SIZE: {512}
.RequestEncodingMixin: ClassType
.RequestEncodingMixin.__call__: () -> models.RequestEncodingMixin
.RequestEncodingMixin.path_url : (self: models.RequestEncodingMixin) -> Str
.RequestEncodingMixin.path_url: Str
.RequestEncodingMixin._encode_params: (data: Obj) -> Never
.RequestEncodingMixin._encode_files: |Type_112315 <: Structural({.__or__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(files: Obj, data: Type_112315) -> global::Tuple([global::Bytes, Str])

.RequestHooksMixin: ClassType
.RequestHooksMixin.__call__: () -> models.RequestHooksMixin
.RequestHooksMixin.register_hook: (self: models.RequestHooksMixin, event: Obj, hook: Obj) -> NoneType
.RequestHooksMixin.deregister_hook: (self: models.RequestHooksMixin, event: Obj, hook: Obj) -> Never

.Request: ClassType
models = pyimport "models"
.Request <: HooksMixin
.Request.json: Never
.Request.files: Never
.Request.auth: Never
.Request.data: Never
.Request.url: Never
.Request.params: Never
.Request.headers: Never
.Request.cookies: Never
.Request.method: Never
.Request.hooks: Never
.Request.__call__: (method: Obj := Obj, url: Obj := Obj, headers: Obj := Obj, files: Obj := Obj, data: Obj := Obj, params: Obj := Obj, auth: Obj := Obj, cookies: Obj := Obj, hooks: Obj := Obj, json: Obj := Obj) -> models.Request
.Request.__repr__: (self: models.Request) -> Str
.Request.prepare: (self: models.Request) -> models.PreparedRequest

.PreparedRequest: ClassType
.PreparedRequest <: .RequestEncodingMixin
.PreparedRequest.method: Never
.PreparedRequest._cookies: Never
.PreparedRequest.headers: Never
.PreparedRequest.body: Never
.PreparedRequest.url: Never
.PreparedRequest._body_position: Never
.PreparedRequest.hooks: Never
.PreparedRequest.__call__: () -> models.PreparedRequest
.PreparedRequest.prepare: (self: models.PreparedRequest, method: Obj := Obj, url: Obj := Obj, headers: Obj := Obj, files: Bool := Bool, data: Obj := Obj, params: Obj := Obj, auth: Obj := Obj, cookies: Obj := Obj, hooks: Never := Never, json: Obj := Obj) -> NoneType
.PreparedRequest.__repr__: (self: models.PreparedRequest) -> Str
.PreparedRequest.copy: (self: models.PreparedRequest) -> models.PreparedRequest
.PreparedRequest.prepare_method: (self: models.PreparedRequest, method: Obj) -> NoneType
.PreparedRequest._get_idna_encoded_host: (host: Str) -> Str
.PreparedRequest.prepare_url: (self: models.PreparedRequest, url: Obj, params: Obj) -> NoneType
.PreparedRequest.prepare_headers: (self: models.PreparedRequest, headers: Obj) -> NoneType
.PreparedRequest.prepare_body: (self: models.PreparedRequest, data: Obj, files: Bool, json: Obj := Obj) -> NoneType
.PreparedRequest.prepare_content_length: (self: models.PreparedRequest, body: global::Bytes) -> NoneType
.PreparedRequest.prepare_auth: (self: models.PreparedRequest, auth: Obj, url: Str := {""} and Str) -> NoneType
.PreparedRequest.prepare_cookies: (self: models.PreparedRequest, cookies: Obj) -> NoneType
.PreparedRequest.prepare_hooks: |O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(self: models.PreparedRequest, hooks: O) -> NoneType

.Response: ClassType
.Response._content_consumed: Never
.Response._content: Never
.Response.raw: Never
.Response.url: Never
.Response.history: Never
.Response.headers: Never
.Response.cookies: Never
.Response.encoding: Never
.Response.reason: Never
.Response._next: Never
.Response.elapsed: Never
.Response.request: Never
.Response.status_code: Never
.Response.__call__: () -> models.Response
.Response.__attrs__: global::List!({"status_code", "url", "encoding", "elapsed", "headers", "request", "_content", "reason", "cookies", "history"}, 10)
.Response.__enter__: |Type_112402 <: models.Response|(self: Type_112402) -> Type_112402
.Response.__exit__: (self: models.Response, *args: Obj) -> NoneType
.Response.__getstate__: (self: models.Response) -> global::Dict!({Never: Never})
.Response.__setstate__: |Type_112409 <: Structural({.items = (self: Obj) -> ?117049}), Type_117049: Type|(self: models.Response, state: Type_112409) -> NoneType
.Response.__repr__: (self: models.Response) -> Str
.Response.__bool__: (self: models.Response) -> Never
.Response.__nonzero__: (self: models.Response) -> Never
.Response.__iter__: (self: models.Response) -> NoneType
.Response.ok : (self: models.Response) -> {True}
.Response.ok: {True}
.Response.is_redirect : (self: models.Response) -> Bool
.Response.is_redirect: Bool
.Response.is_permanent_redirect : (self: models.Response) -> Bool
.Response.is_permanent_redirect: Bool
.Response.next : (self: models.Response) -> Never
.Response.next: Never
.Response.apparent_encoding : (self: models.Response) -> Never
.Response.apparent_encoding: Never
.Response.iter_content: |Type_112436 :> {False}, Type_112436 <: Bool|(self: models.Response, chunk_size: Nat := Nat, decode_unicode: Type_112436 := Type_112436 and Type_112436) -> NoneType
.Response.iter_lines: (self: models.Response, chunk_size: Nat := Nat, decode_unicode: Bool := Bool, delimiter: Never := Never) -> NoneType
.Response.content : (self: models.Response) -> Never
.Response.content: Never
.Response.text : (self: models.Response) -> {None}
.Response.text: {None}
.Response.json: (self: models.Response, **kwargs := Obj) -> Never
.Response.links : (self: models.Response) -> global::Dict!({Never: global::Dict!({{"url"}: Str})})
.Response.links: Never
.Response.raise_for_status: (self: models.Response) -> NoneType
.Response.close: (self: models.Response) -> NoneType

