##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/util/ssltransport.py 1752607604 8847
.___v_desugar_1: Never
.annotations: Never
.io: Never

.socket: Never

.ssl: Never

.typing: Never

.___v_desugar_2: Never
.ProxySchemeUnsupported: Never

.___v_desugar_3 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Self: Never
.___v_desugar_4 = pyimport "ssl_"
.ssl_ = pyimport "ssl_"
._TYPE_PEER_CERT_RET: Never
._TYPE_PEER_CERT_RET_DICT: Never


._WriteBuffer: Never
._ReturnValue: Never
.SSL_BLOCKSIZE: {16384}
.SSLTransport: ClassType
.SSLTransport.incoming: Never
.SSLTransport.outgoing: Never
.SSLTransport.sslobj: Never
.SSLTransport.suppress_ragged_eofs: Bool
.SSLTransport.socket: Never
.SSLTransport.__call__: (socket: Obj, ssl_context: Obj, server_hostname: NoneType or Str := NoneType or Str, suppress_ragged_eofs: Bool := Bool) -> ssltransport.SSLTransport
.SSLTransport._validate_ssl_context_for_tls_in_tls: (ssl_context: Obj) -> NoneType
.SSLTransport.__enter__: (self: ssltransport.SSLTransport) -> ssltransport.SSLTransport
.SSLTransport.__exit__: (self: ssltransport.SSLTransport, *Obj) -> NoneType
.SSLTransport.fileno: (self: ssltransport.SSLTransport) -> Int
.SSLTransport.read: (self: ssltransport.SSLTransport, len: Int := Int, buffer: Obj := Obj) -> Int or global::Bytes
.SSLTransport.recv: (self: ssltransport.SSLTransport, buflen: Int := Int, flags: Int := Int) -> Int or global::Bytes
.SSLTransport.recv_into: (self: ssltransport.SSLTransport, buffer: Obj, nbytes: NoneType or Int := NoneType or Int, flags: Int := Int) -> NoneType or Int or global::Bytes
.SSLTransport.sendall: (self: ssltransport.SSLTransport, data: global::Bytes, flags: Int := Int) -> NoneType
.SSLTransport.send: (self: ssltransport.SSLTransport, data: global::Bytes, flags: Int := Int and Int) -> Int
.SSLTransport.makefile: (self: ssltransport.SSLTransport, mode: Str, buffering: NoneType or Int := NoneType or Int, encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str, newline: NoneType or Str := NoneType or Str) -> Never
.SSLTransport.unwrap: (self: ssltransport.SSLTransport) -> NoneType
.SSLTransport.close: (self: ssltransport.SSLTransport) -> NoneType
.SSLTransport.getpeercert: (self: ssltransport.SSLTransport, binary_form: Obj := Obj) -> Never
.SSLTransport.getpeercert: (self: ssltransport.SSLTransport, binary_form: Obj) -> NoneType or global::Bytes
.SSLTransport.getpeercert: (self: ssltransport.SSLTransport, binary_form: Bool := Bool) -> Never
.SSLTransport.version: (self: ssltransport.SSLTransport) -> NoneType or Str
.SSLTransport.cipher: (self: ssltransport.SSLTransport) -> NoneType or global::Tuple([Str, Str, Int])
.SSLTransport.selected_alpn_protocol: (self: ssltransport.SSLTransport) -> NoneType or Str
.SSLTransport.shared_ciphers: (self: ssltransport.SSLTransport) -> NoneType or global::List!(global::Tuple([Str, Str, Int]), _: Nat)
.SSLTransport.compression: (self: ssltransport.SSLTransport) -> NoneType or Str
.SSLTransport.settimeout: (self: ssltransport.SSLTransport, value: Float or NoneType) -> NoneType
.SSLTransport.gettimeout: (self: ssltransport.SSLTransport) -> Float or NoneType
.SSLTransport._decref_socketios: (self: ssltransport.SSLTransport) -> NoneType
.SSLTransport._wrap_ssl_read: (self: ssltransport.SSLTransport, len: Int, buffer: NoneType or global::ByteArray! := {None} and NoneType or global::ByteArray!) -> Int or global::Bytes
.SSLTransport._ssl_io_loop: (self: ssltransport.SSLTransport, func: () -> NoneType) -> NoneType
.SSLTransport._ssl_io_loop: (self: ssltransport.SSLTransport, func: (global::Bytes) -> Int, arg1: global::Bytes) -> Int
.SSLTransport._ssl_io_loop: (self: ssltransport.SSLTransport, func: (Int, NoneType or global::ByteArray!) -> global::Bytes, arg1: Int, arg2: NoneType or global::ByteArray!) -> global::Bytes
.SSLTransport._ssl_io_loop: (self: ssltransport.SSLTransport, func: () -> Obj, arg1: NoneType or Int or global::Bytes := {None} and NoneType or Int or global::Bytes, arg2: NoneType or global::ByteArray! := {None} and NoneType or global::ByteArray!) -> Never

