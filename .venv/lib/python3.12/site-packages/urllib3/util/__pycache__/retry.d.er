##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/util/retry.py 1752607604 18459
.___v_desugar_1: Never
.annotations: Never
.email: Never

.logging: Never

.random: Never

.re: Never

.time: Never

.typing: Never

.___v_desugar_2: Never
.takewhile: Never
.___v_desugar_3: Never
.TracebackType: Never
.___v_desugar_4: Never
.ConnectTimeoutError: Never
.InvalidHeader: Never
.MaxRetryError: Never
.ProtocolError: Never
.ProxyError: Never
.ReadTimeoutError: Never
.ResponseError: Never
.___v_desugar_5 = pyimport "util"
.util = pyimport "util"
.reraise: (tp: Obj, value: global::BaseException, tb: Obj := Obj) -> Never

.___v_desugar_6 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Self: Never
.___v_desugar_7: Never
.ConnectionPool: Never
.___v_desugar_8 = pyimport "response"
.response = pyimport "response"
.BaseHTTPResponse: Never


.log: Never
.RequestHistory: ClassType
.RequestHistory <: Never
.RequestHistory.status: NoneType or Int
.RequestHistory.url: NoneType or Str
.RequestHistory.redirect_location: NoneType or Str
.RequestHistory.method: NoneType or Str
.RequestHistory.error: NoneType or global::Exception

.Retry: ClassType
.Retry.raise_on_status: Bool
.Retry.DEFAULT: Never
.Retry.read: NoneType or Int
.Retry.raise_on_redirect: Bool
.Retry.remove_headers_on_redirect: Never
.Retry.allowed_methods: Never
.Retry.total: NoneType or Int
.Retry.connect: NoneType or Int
.Retry.respect_retry_after_header: Bool
.Retry.status: NoneType or Int
.Retry.history: Never
.Retry.redirect: NoneType or Int
.Retry.backoff_max: Float
.Retry.other: NoneType or Int
.Retry.backoff_factor: Float
.Retry.status_forcelist: Never
.Retry.backoff_jitter: Float
.Retry.__call__: (total: NoneType or Int := NoneType or Int, connect: NoneType or Int := NoneType or Int, read: NoneType or Int := NoneType or Int, redirect: NoneType or Int := NoneType or Int, status: NoneType or Int := NoneType or Int, other: NoneType or Int := NoneType or Int, allowed_methods: global::Collection(Str) or NoneType := global::Collection(Str) or NoneType, status_forcelist: NoneType or global::Collection(Int) := NoneType or global::Collection(Int), backoff_factor: Float := Float, backoff_max: Float := Float, raise_on_redirect: Bool := Bool, raise_on_status: Bool := Bool, history: NoneType or global::HomogenousTuple(util.retry.RequestHistory) := NoneType or global::HomogenousTuple(util.retry.RequestHistory), respect_retry_after_header: Bool := Bool, remove_headers_on_redirect: global::Collection(Str) := global::Collection(Str), backoff_jitter: Float := Float) -> util.retry.Retry
.Retry.DEFAULT_ALLOWED_METHODS: Never
.Retry.RETRY_AFTER_STATUS_CODES: Never
.Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT: Never
.Retry.DEFAULT_BACKOFF_MAX: {120}
.Retry.new: (self: util.retry.Retry, **kw := Obj) -> util.retry.Retry
.Retry.from_int: (cls: (NoneType or Int or util.retry.Retry) -> util.retry.Retry, retries: NoneType or Int or util.retry.Retry, redirect: NoneType or Int := {True} and NoneType or Int, default: NoneType or Int or util.retry.Retry := {None} and NoneType or Int or util.retry.Retry) -> util.retry.Retry
.Retry.get_backoff_time: (self: util.retry.Retry) -> Float
.Retry.parse_retry_after: (self: util.retry.Retry, retry_after: Str) -> Float
.Retry.get_retry_after: (self: util.retry.Retry, response: Obj) -> Float or NoneType
.Retry.sleep_for_retry: (self: util.retry.Retry, response: Obj) -> Bool
.Retry._sleep_backoff: (self: util.retry.Retry) -> NoneType
.Retry.sleep: (self: util.retry.Retry, response: Obj := Obj) -> NoneType
.Retry._is_connection_error: (self: util.retry.Retry, err: global::Exception) -> Bool
.Retry._is_read_error: (self: util.retry.Retry, err: global::Exception) -> Bool
.Retry._is_method_retryable: (self: util.retry.Retry, method: Str) -> Bool
.Retry.is_retry: (self: util.retry.Retry, method: Str, status_code: Int, has_retry_after: Bool := Bool) -> Bool
.Retry.is_exhausted: (self: util.retry.Retry) -> Bool
.Retry.increment: (self: util.retry.Retry, method: NoneType or Str := NoneType or Str, url: NoneType or Str := NoneType or Str, response: Obj := Obj, error: NoneType or global::Exception := NoneType or global::Exception, _pool: Obj := Obj, _stacktrace: Obj := Obj) -> util.retry.Retry
.Retry.__repr__: (self: util.retry.Retry) -> Str


