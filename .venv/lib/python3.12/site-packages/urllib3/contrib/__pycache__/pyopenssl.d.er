##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/contrib/pyopenssl.py 1752607604 19720

.___v_desugar_1: Never
.annotations: Never
.OpenSSL: Never

.___v_desugar_2: Never
.x509: Never
.___v_desugar_3: Never
.UnsupportedExtension: Never
.UnsupportedExtension: ClassType


.logging: Never

.ssl: Never

.typing: Never

.___v_desugar_4: Never
.BytesIO: Never
.___v_desugar_5: Never
.socket_cls: Never
.___v_desugar_6: Never
.timeout: Never
.___v_desugar_7 = pyimport "__init__"
.__init__ = pyimport "__init__"
.util: Never

.___v_desugar_8: Never
.X509: Never


.__all__: global::List!({"extract_from_urllib3", "inject_into_urllib3"}, 2)
._openssl_versions: Never








._stdlib_to_openssl_verify: Never
._openssl_to_stdlib_verify: Never
._OP_NO_SSLv2_OR_SSLv3: Int
._OP_NO_TLSv1: Int
._OP_NO_TLSv1_1: Int
._OP_NO_TLSv1_2: Int
._OP_NO_TLSv1_3: Int
._openssl_to_ssl_minimum_version: Never
._openssl_to_ssl_maximum_version: Never
.SSL_WRITE_BLOCKSIZE: {16384}
.orig_util_SSLContext: Never
.log: Never
.inject_into_urllib3: () -> NoneType
.extract_from_urllib3: () -> NoneType
._validate_dependencies_met: () -> NoneType
._dnsname_to_stdlib: (name: Str) -> NoneType or Str
.get_subj_alt_name: (peer_cert: Obj) -> global::List!(global::Tuple([Str, Str]), _: Nat)
.WrappedSocket: ClassType
.WrappedSocket.socket: Never
.WrappedSocket.connection: Never
.WrappedSocket._closed: Never
.WrappedSocket.suppress_ragged_eofs: Bool
.WrappedSocket._io_refs: Never
.WrappedSocket.__call__: (connection: Obj, socket: Obj, suppress_ragged_eofs: Bool := Bool) -> urllib3.contrib.pyopenssl.WrappedSocket
.WrappedSocket.fileno: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> Int
.WrappedSocket._decref_socketios: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> NoneType
.WrappedSocket.recv: (self: urllib3.contrib.pyopenssl.WrappedSocket, *args: Obj, **kwargs := Obj) -> global::Bytes
.WrappedSocket.recv_into: (self: urllib3.contrib.pyopenssl.WrappedSocket, *args: Obj, **kwargs := Obj) -> Int
.WrappedSocket.settimeout: (self: urllib3.contrib.pyopenssl.WrappedSocket, timeout: Float) -> NoneType
.WrappedSocket._send_until_done: (self: urllib3.contrib.pyopenssl.WrappedSocket, data: global::Bytes) -> Int
.WrappedSocket.sendall: (self: urllib3.contrib.pyopenssl.WrappedSocket, data: global::Bytes) -> NoneType
.WrappedSocket.shutdown: (self: urllib3.contrib.pyopenssl.WrappedSocket, how: Int) -> NoneType
.WrappedSocket.close: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> NoneType
.WrappedSocket._real_close: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> NoneType
.WrappedSocket.getpeercert: Never
.WrappedSocket.version: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> Str
.WrappedSocket.selected_alpn_protocol: (self: urllib3.contrib.pyopenssl.WrappedSocket) -> NoneType or Str


.PyOpenSSLContext: ClassType
.PyOpenSSLContext._verify_flags: Int
.PyOpenSSLContext.check_hostname: Never
.PyOpenSSLContext.protocol: Int
.PyOpenSSLContext._ctx: Never
.PyOpenSSLContext._options: Never
.PyOpenSSLContext._maximum_version: Int
.PyOpenSSLContext._minimum_version: Int
.PyOpenSSLContext.__call__: (protocol: Int) -> urllib3.contrib.pyopenssl.PyOpenSSLContext
.PyOpenSSLContext.options : (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> Int
.PyOpenSSLContext.options: Int
.PyOpenSSLContext.options: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, value: Int) -> NoneType
.PyOpenSSLContext.verify_flags : (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> Int
.PyOpenSSLContext.verify_flags: Int
.PyOpenSSLContext.verify_flags: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, value: Int) -> NoneType
.PyOpenSSLContext.verify_mode : (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> Int
.PyOpenSSLContext.verify_mode: Int
.PyOpenSSLContext.verify_mode: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, value: Obj) -> NoneType
.PyOpenSSLContext.set_default_verify_paths: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> NoneType
.PyOpenSSLContext.set_ciphers: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, ciphers: global::Bytes or Str) -> NoneType
.PyOpenSSLContext.load_verify_locations: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, cafile: NoneType or Str := NoneType or Str, capath: NoneType or Str := NoneType or Str, cadata: NoneType or global::Bytes := NoneType or global::Bytes) -> NoneType
.PyOpenSSLContext.load_cert_chain: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, certfile: Str, keyfile: NoneType or Str := NoneType or Str, password: NoneType or Str := NoneType or Str) -> NoneType
.PyOpenSSLContext.set_alpn_protocols: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, protocols: global::List!(global::Bytes or Str, _: Nat)) -> NoneType
.PyOpenSSLContext.wrap_socket: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, sock: Obj, server_side: Bool := Bool, do_handshake_on_connect: Bool := Bool, suppress_ragged_eofs: Bool := Bool, server_hostname: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str) -> urllib3.contrib.pyopenssl.WrappedSocket
.PyOpenSSLContext._set_ctx_options: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> NoneType
.PyOpenSSLContext.minimum_version : (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> Int
.PyOpenSSLContext.minimum_version: Int
.PyOpenSSLContext.minimum_version: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, minimum_version: Int) -> NoneType
.PyOpenSSLContext.maximum_version : (self: urllib3.contrib.pyopenssl.PyOpenSSLContext) -> Int
.PyOpenSSLContext.maximum_version: Int
.PyOpenSSLContext.maximum_version: (self: urllib3.contrib.pyopenssl.PyOpenSSLContext, maximum_version: Int) -> NoneType

._verify_callback: (cnx: Obj, x509: Obj, err_no: Int, err_depth: Int, return_code: Int) -> Bool
