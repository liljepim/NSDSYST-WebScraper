##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/connectionpool.py 1752607604 43371
.___v_desugar_1: Never
.annotations: Never
.errno: Never

.logging: Never

.queue: Never

.sys: Never

.typing: Never

.warnings: Never

.weakref: Never

.___v_desugar_2: Never
.SocketTimeout: Never
.___v_desugar_3: Never
.TracebackType: Never
.___v_desugar_4 = pyimport "_base_connection"
._base_connection = pyimport "_base_connection"
._TYPE_BODY: Never
.___v_desugar_5 = pyimport "_collections"
._collections = pyimport "_collections"
.HTTPHeaderDict: {_collections.HTTPHeaderDict}
.___v_desugar_6 = pyimport "_request_methods"
._request_methods = pyimport "_request_methods"
.RequestMethods: Never
.___v_desugar_7 = pyimport "connection"
.connection = pyimport "connection"
.BaseSSLError: Never
.BrokenPipeError: {global::BrokenPipeError}
.DummyConnection: {connection.DummyConnection}
.HTTPConnection: {connection.HTTPConnection}
.HTTPException: Never
.HTTPSConnection: {connection.HTTPSConnection}
.ProxyConfig: {_base_connection.ProxyConfig}
._wrap_proxy_error: (err: global::Exception, proxy_scheme: NoneType or Str) -> Never
.___v_desugar_8 = pyimport "connection"

.port_by_scheme: Never
.___v_desugar_9 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.ClosedPoolError: {exceptions.ClosedPoolError}
.EmptyPoolError: {exceptions.EmptyPoolError}
.FullPoolError: {exceptions.FullPoolError}
.HostChangedError: {exceptions.HostChangedError}
.InsecureRequestWarning: {exceptions.InsecureRequestWarning}
.LocationValueError: {exceptions.LocationValueError}
.MaxRetryError: {exceptions.MaxRetryError}
.NewConnectionError: {exceptions.NewConnectionError}
.ProtocolError: {exceptions.ProtocolError}
.ProxyError: {exceptions.ProxyError}
.ReadTimeoutError: {exceptions.ReadTimeoutError}
.SSLError: {exceptions.SSLError}
.TimeoutError: Never
.___v_desugar_10 = pyimport "response"
.response = pyimport "response"
.BaseHTTPResponse: {response.BaseHTTPResponse}
.___v_desugar_11 = pyimport "connection"

.is_connection_dropped: (conn: Obj) -> Bool
.___v_desugar_12 = pyimport "proxy"
.proxy = pyimport "proxy"
.connection_requires_http_tunnel: (proxy_url: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: Obj := Obj, destination_scheme: NoneType or Str := NoneType or Str) -> Bool
.___v_desugar_13 = pyimport "request"
.request = pyimport "request"
._TYPE_BODY_POSITION: Never
.set_file_position: (body: Obj, pos: Obj) -> Never
.___v_desugar_14 = pyimport "retry"
.retry = pyimport "retry"
.Retry: {util.retry.Retry}
.___v_desugar_15 = pyimport "ssl_match_hostname"
.ssl_match_hostname = pyimport "ssl_match_hostname"
.CertificateError: {util.ssl_match_hostname.CertificateError}
.___v_desugar_16 = pyimport "timeout"
.timeout = pyimport "timeout"
._DEFAULT_TIMEOUT: Never
._TYPE_DEFAULT: Never
.Timeout: {timeout.Timeout}
.___v_desugar_17 = pyimport "url"
.url = pyimport "url"
.Url: {util.url.Url}
._encode_target: (target: Str) -> Str
.___v_desugar_18 = pyimport "url"

.normalize_host: (host: NoneType, scheme: NoneType or Str) -> NoneType
.___v_desugar_19 = pyimport "url"

.parse_url: (url: Str) -> util.url.Url
.___v_desugar_20 = pyimport "util"
.util = pyimport "util"
.to_str: (x: global::Bytes or Str, encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str) -> Str

.ssl: Never

.___v_desugar_21 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Self: Never
.___v_desugar_22 = pyimport "_base_connection"

.BaseHTTPConnection: {_base_connection.BaseHTTPConnection}
.BaseHTTPSConnection: {_base_connection.BaseHTTPSConnection}


.log: Never
._TYPE_TIMEOUT: Never
.ConnectionPool: ClassType
.ConnectionPool.port: NoneType or Int
.ConnectionPool.host: Str
.ConnectionPool._tunnel_host: Never
.ConnectionPool.__call__: (host: Str, port: NoneType or Int := NoneType or Int) -> connectionpool.ConnectionPool
.ConnectionPool.scheme: NoneType or Str
.ConnectionPool.QueueCls: Never
.ConnectionPool.__str__: (self: connectionpool.ConnectionPool) -> Str
.ConnectionPool.__enter__: (self: connectionpool.ConnectionPool) -> connectionpool.ConnectionPool
.ConnectionPool.__exit__: (self: connectionpool.ConnectionPool, exc_type: Obj, exc_val: global::BaseException or NoneType, exc_tb: Obj) -> {False}
.ConnectionPool.close: (self: connectionpool.ConnectionPool) -> NoneType

._blocking_errnos: Never
.HTTPConnectionPool: ClassType
connectionpool = pyimport "connectionpool"
.HTTPConnectionPool <: .ConnectionPool
.HTTPConnectionPool.timeout: Never
.HTTPConnectionPool.proxy_headers: Never
.HTTPConnectionPool.num_connections: Never
.HTTPConnectionPool.block: Bool
.HTTPConnectionPool.proxy_config: Never
.HTTPConnectionPool.pool: Never
.HTTPConnectionPool.proxy: Never
.HTTPConnectionPool.num_requests: Never
.HTTPConnectionPool.retries: NoneType or util.retry.Retry or Int or Bool
.HTTPConnectionPool.conn_kw: Never
.HTTPConnectionPool.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, maxsize: Int := Int, block: Bool := Bool, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), retries: NoneType or Int or util.retry.Retry := NoneType or Int or util.retry.Retry, _proxy: NoneType or util.url.Url := NoneType or util.url.Url, _proxy_headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), _proxy_config: NoneType or _base_connection.ProxyConfig := NoneType or _base_connection.ProxyConfig, **conn_kw := Obj) -> connectionpool.HTTPConnectionPool
.HTTPConnectionPool.scheme: {"http"}
.HTTPConnectionPool.ConnectionCls: {connection.HTTPConnection}
.HTTPConnectionPool._new_conn: (self: connectionpool.HTTPConnectionPool) -> _base_connection.BaseHTTPConnection
.HTTPConnectionPool._get_conn: (self: connectionpool.HTTPConnectionPool, timeout: Float or NoneType := Float or NoneType) -> _base_connection.BaseHTTPConnection
.HTTPConnectionPool._put_conn: (self: connectionpool.HTTPConnectionPool, conn: NoneType or _base_connection.BaseHTTPConnection) -> NoneType
.HTTPConnectionPool._validate_conn: (self: connectionpool.HTTPConnectionPool, conn: _base_connection.BaseHTTPConnection) -> NoneType
.HTTPConnectionPool._prepare_proxy: (self: connectionpool.HTTPConnectionPool, conn: _base_connection.BaseHTTPConnection) -> NoneType
.HTTPConnectionPool._get_timeout: (self: connectionpool.HTTPConnectionPool, timeout: Obj) -> timeout.Timeout
.HTTPConnectionPool._raise_timeout: (self: connectionpool.HTTPConnectionPool, err: Obj, url: Str, timeout_value: Obj) -> NoneType
.HTTPConnectionPool._make_request: (self: connectionpool.HTTPConnectionPool, conn: _base_connection.BaseHTTPConnection, method: Str, url: Str, body: Obj := Obj, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), retries: NoneType or util.retry.Retry := NoneType or util.retry.Retry, timeout: Obj := Obj, chunked: Bool := Bool, response_conn: NoneType or _base_connection.BaseHTTPConnection := NoneType or _base_connection.BaseHTTPConnection, preload_content: Bool := Bool, decode_content: Bool := Bool, enforce_content_length: Bool := Bool) -> response.BaseHTTPResponse
.HTTPConnectionPool.close: (self: connectionpool.HTTPConnectionPool) -> NoneType
.HTTPConnectionPool.is_same_host: (self: connectionpool.HTTPConnectionPool, url: Str) -> Bool
.HTTPConnectionPool.urlopen: (self: connectionpool.HTTPConnectionPool, method: Str, url: Str, body: Obj := Obj, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), retries: NoneType or Int or util.retry.Retry := NoneType or Int or util.retry.Retry, redirect: Bool := Bool, assert_same_host: Bool := Bool, timeout: Obj := Obj, pool_timeout: NoneType or Int := NoneType or Int, release_conn: NoneType or Bool := NoneType or Bool, chunked: Bool := Bool, body_pos: Obj := Obj, preload_content: Bool := Bool, decode_content: Bool := Bool, **response_kw := Obj) -> response.BaseHTTPResponse

.HTTPSConnectionPool: ClassType
.HTTPSConnectionPool <: .HTTPConnectionPool
.HTTPSConnectionPool.key_password: NoneType or Str
.HTTPSConnectionPool.cert_file: NoneType or Str
.HTTPSConnectionPool.cert_reqs: NoneType or Int or Str
.HTTPSConnectionPool.ssl_version: NoneType or Int or Str
.HTTPSConnectionPool.ca_cert_dir: NoneType or Str
.HTTPSConnectionPool.ca_certs: NoneType or Str
.HTTPSConnectionPool.ssl_minimum_version: Never
.HTTPSConnectionPool.assert_fingerprint: NoneType or Str
.HTTPSConnectionPool.key_file: NoneType or Str
.HTTPSConnectionPool.assert_hostname: Never
.HTTPSConnectionPool.ssl_maximum_version: Never
.HTTPSConnectionPool.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, maxsize: Int := Int, block: Bool := Bool, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), retries: NoneType or Int or util.retry.Retry := NoneType or Int or util.retry.Retry, _proxy: NoneType or util.url.Url := NoneType or util.url.Url, _proxy_headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), key_file: NoneType or Str := NoneType or Str, cert_file: NoneType or Str := NoneType or Str, cert_reqs: NoneType or Int or Str := NoneType or Int or Str, key_password: NoneType or Str := NoneType or Str, ca_certs: NoneType or Str := NoneType or Str, ssl_version: NoneType or Int or Str := NoneType or Int or Str, ssl_minimum_version: Obj := Obj, ssl_maximum_version: Obj := Obj, assert_hostname: Obj := Obj, assert_fingerprint: NoneType or Str := NoneType or Str, ca_cert_dir: NoneType or Str := NoneType or Str, **conn_kw := Obj) -> connectionpool.HTTPSConnectionPool
.HTTPSConnectionPool.scheme: {"https"}
.HTTPSConnectionPool.ConnectionCls: {connection.HTTPSConnection}
.HTTPSConnectionPool._prepare_proxy: (self: connectionpool.HTTPSConnectionPool, conn: connection.HTTPSConnection) -> NoneType
.HTTPSConnectionPool._new_conn: (self: connectionpool.HTTPSConnectionPool) -> _base_connection.BaseHTTPSConnection
.HTTPSConnectionPool._validate_conn: (self: connectionpool.HTTPSConnectionPool, conn: _base_connection.BaseHTTPConnection) -> NoneType

.connection_from_url: (url: Str, **kw := Obj) -> connectionpool.HTTPConnectionPool
._normalize_host: (host: NoneType, scheme: NoneType or Str) -> NoneType


._url_from_pool: (pool: connectionpool.HTTPConnectionPool, path: NoneType or Str := NoneType or Str) -> Str
._close_pool_connections: (pool: global::List(NoneType, _: Nat) or global::GenericDict or global::Indexable(Obj, Never)) -> NoneType
