##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/poolmanager.py 1752607604 23866
.___v_desugar_1: Never
.annotations: Never
.functools: Never

.logging: Never

.typing: Never

.warnings: Never

.___v_desugar_2: Never
.TracebackType: Never
.___v_desugar_3: Never
.urljoin: Never
.___v_desugar_4 = pyimport "_collections"
._collections = pyimport "_collections"
.HTTPHeaderDict: {_collections.HTTPHeaderDict}
.RecentlyUsedContainer: {_collections.RecentlyUsedContainer}
.___v_desugar_5 = pyimport "_request_methods"
._request_methods = pyimport "_request_methods"
.RequestMethods: Never
.___v_desugar_6 = pyimport "connection"
.connection = pyimport "connection"
.ProxyConfig: Never
.___v_desugar_7 = pyimport "connectionpool"
.connectionpool = pyimport "connectionpool"
.HTTPConnectionPool: Never
.HTTPSConnectionPool: Never
.port_by_scheme: Never
.___v_desugar_8 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.LocationValueError: Never
.MaxRetryError: Never
.ProxySchemeUnknown: Never
.URLSchemeUnknown: Never
.___v_desugar_9 = pyimport "response"
.response = pyimport "response"
.BaseHTTPResponse: Never
.___v_desugar_10 = pyimport "connection"

._TYPE_SOCKET_OPTIONS: {global::List(global::Tuple(global::Tuple([{Int}, {Int}, Never])), _: Nat)}
.___v_desugar_11 = pyimport "proxy"
.proxy = pyimport "proxy"
.connection_requires_http_tunnel: (proxy_url: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: Obj := Obj, destination_scheme: NoneType or Str := NoneType or Str) -> Bool
.___v_desugar_12 = pyimport "retry"
.retry = pyimport "retry"
.Retry: {util.retry.Retry}
.___v_desugar_13 = pyimport "timeout"
.timeout = pyimport "timeout"
.Timeout: {timeout.Timeout}
.___v_desugar_14 = pyimport "url"
.url = pyimport "url"
.Url: {util.url.Url}
.parse_url: (url: Str) -> util.url.Url

.ssl: Never

.___v_desugar_15 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Self: Never


.__all__: global::List!({"PoolManager", "ProxyManager", "proxy_from_url"}, 3)
.log: Never
.SSL_KEYWORDS: {Type_v_global_68985: global::Tuple([Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str]) | Type_v_global_68985 == ("key_file", "cert_file", "cert_reqs", "ca_certs", "ca_cert_data", "ssl_version", "(...)", "(...)", ...)}
._DEFAULT_BLOCKSIZE: {16384}
.PoolKey: ClassType
.PoolKey <: Never
.PoolKey.key_socket_options: Never
.PoolKey.key_retries: NoneType or util.retry.Retry or Int or Bool
.PoolKey.key_block: NoneType or Bool
.PoolKey.key_ssl_context: Never
.PoolKey.key__proxy_config: Never
.PoolKey.key_key_file: NoneType or Str
.PoolKey.key_ssl_maximum_version: Never
.PoolKey.key_ca_certs: NoneType or Str
.PoolKey.key_key_password: NoneType or Str
.PoolKey.key_source_address: Never
.PoolKey.key_server_hostname: NoneType or Str
.PoolKey.key_maxsize: NoneType or Int
.PoolKey.key_ssl_version: NoneType or Int or Str
.PoolKey.key__proxy: NoneType or util.url.Url
.PoolKey.key_ca_cert_data: NoneType or global::Bytes or Str
.PoolKey.key_host: Str
.PoolKey.key_ca_cert_dir: NoneType or Str
.PoolKey.key_port: NoneType or Int
.PoolKey.key__proxy_headers: Never
.PoolKey.key_cert_reqs: NoneType or Str
.PoolKey.key__socks_options: Never
.PoolKey.key_assert_fingerprint: NoneType or Str
.PoolKey.key_blocksize: NoneType or Int
.PoolKey.key_ssl_minimum_version: Never
.PoolKey.key_timeout: Float or timeout.Timeout or NoneType
.PoolKey.key_cert_file: NoneType or Str
.PoolKey.key_scheme: Str
.PoolKey.key_headers: Never
.PoolKey.key_assert_hostname: NoneType or Bool or Str

._default_key_normalizer: Never
.key_fn_by_scheme: Never
.pool_classes_by_scheme: Never
.PoolManager: ClassType
.PoolManager <: Never
.PoolManager.pools: Never
.PoolManager.pool_classes_by_scheme: Never
.PoolManager.connection_pool_kw: Never
.PoolManager.key_fn_by_scheme: Never
.PoolManager.__call__: (num_pools: Int := Int, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), **connection_pool_kw := Obj) -> poolmanager.PoolManager
.PoolManager.proxy: NoneType or util.url.Url
.PoolManager.proxy_config: Never
.PoolManager.__enter__: (self: poolmanager.PoolManager) -> poolmanager.PoolManager
.PoolManager.__exit__: (self: poolmanager.PoolManager, exc_type: Obj, exc_val: global::BaseException or NoneType, exc_tb: Obj) -> {False}
.PoolManager._new_pool: Never
.PoolManager.clear: (self: poolmanager.PoolManager) -> NoneType
.PoolManager.connection_from_host: Never
.PoolManager.connection_from_context: Never
.PoolManager.connection_from_pool_key: Never
.PoolManager.connection_from_url: Never
.PoolManager._merge_pool_kwargs: Never
.PoolManager._proxy_requires_url_absolute_form: (self: poolmanager.PoolManager, parsed_url: util.url.Url) -> Bool
.PoolManager.urlopen: (self: poolmanager.PoolManager, method: Str, url: Str, redirect: Bool := Bool and Bool, **kw := Obj) -> Never

.ProxyManager: ClassType
poolmanager = pyimport "poolmanager"
.ProxyManager <: .PoolManager
.ProxyManager.proxy_ssl_context: Never
.ProxyManager.proxy_headers: Never
.ProxyManager.proxy: Never
.ProxyManager.proxy_config: Never
.ProxyManager.__call__: (proxy_url: Str, num_pools: Int := Int, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), proxy_headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), proxy_ssl_context: Obj := Obj, use_forwarding_for_https: Bool := Bool, proxy_assert_hostname: NoneType or Str := NoneType or Str, proxy_assert_fingerprint: NoneType or Str := NoneType or Str, **connection_pool_kw := Obj) -> poolmanager.ProxyManager
.ProxyManager.connection_from_host: Never
.ProxyManager._set_proxy_headers: (self: poolmanager.ProxyManager, url: Str, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str)) -> global::Mapping(Str, Str)
.ProxyManager.urlopen: (self: poolmanager.ProxyManager, method: Str, url: Str, redirect: Bool := Bool, **kw := Obj) -> Never

.proxy_from_url: (url: Str, **kw := Obj) -> poolmanager.ProxyManager
