##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/_base_connection.py 1752607604 5568
.___v_desugar_1: Never
.annotations: Never
.typing: Never

.___v_desugar_2 = pyimport "connection"
.connection = pyimport "connection"
._TYPE_SOCKET_OPTIONS: {global::List(global::Tuple(global::Tuple([{Int}, {Int}, Never])), _: Nat)}
.___v_desugar_3 = pyimport "timeout"
.timeout = pyimport "timeout"
._DEFAULT_TIMEOUT: Never
._TYPE_TIMEOUT: Never
.___v_desugar_4 = pyimport "url"
.url = pyimport "url"
.Url: {util.url.Url}
._TYPE_BODY: Never
.ProxyConfig: ClassType
.ProxyConfig <: Never
.ProxyConfig.ssl_context: Never
.ProxyConfig.use_forwarding_for_https: Bool
.ProxyConfig.assert_hostname: Never
.ProxyConfig.assert_fingerprint: NoneType or Str

.Type__ResponseOptions: ClassType
.Type__ResponseOptions <: Never
.Type__ResponseOptions.request_url: Str
.Type__ResponseOptions.decode_content: Bool
.Type__ResponseOptions.request_method: Str
.Type__ResponseOptions.enforce_content_length: Bool
.Type__ResponseOptions.preload_content: Bool


.ssl: Never

.___v_desugar_5: Never
.Protocol: Never
.___v_desugar_6 = pyimport "response"
.response = pyimport "response"
.BaseHTTPResponse: Never
.BaseHTTPConnection: ClassType
.BaseHTTPConnection <: Never
.BaseHTTPConnection.port: Int
.BaseHTTPConnection.timeout: NoneType or Float
.BaseHTTPConnection.default_port: Never
.BaseHTTPConnection.proxy_is_verified: NoneType or Bool
.BaseHTTPConnection.proxy_config: NoneType or _base_connection.ProxyConfig
.BaseHTTPConnection.default_socket_options: Never
.BaseHTTPConnection.blocksize: Int
.BaseHTTPConnection.is_verified: Bool
.BaseHTTPConnection.proxy: NoneType or util.url.Url
.BaseHTTPConnection.socket_options: NoneType or global::List(global::Tuple(global::Tuple([{Int}, {Int}, Never])), _: Nat)
.BaseHTTPConnection.host: Str
.BaseHTTPConnection.source_address: Never
.BaseHTTPConnection.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, source_address: NoneType or global::Tuple([Str, Int]) := NoneType or global::Tuple([Str, Int]), blocksize: Int := Int, socket_options: NoneType or global::List(global::Tuple(global::Tuple([{Int}, {Int}, Obj])), _: Nat) := NoneType or global::List(global::Tuple(global::Tuple([{Int}, {Int}, Obj])), _: Nat), proxy: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: NoneType or _base_connection.ProxyConfig := NoneType or _base_connection.ProxyConfig) -> _base_connection.BaseHTTPConnection
.BaseHTTPConnection.set_tunnel: (self: _base_connection.BaseHTTPConnection, host: Str, port: NoneType or Int := NoneType or Int, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), scheme: Str := Str) -> NoneType
.BaseHTTPConnection.connect: (self: _base_connection.BaseHTTPConnection) -> NoneType
.BaseHTTPConnection.request: (self: _base_connection.BaseHTTPConnection, method: Str, url: Str, body: Obj := Obj, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), chunked: Bool := Bool, preload_content: Bool := Bool, decode_content: Bool := Bool, enforce_content_length: Bool := Bool) -> NoneType
.BaseHTTPConnection.getresponse: (self: _base_connection.BaseHTTPConnection) -> Never
.BaseHTTPConnection.close: (self: _base_connection.BaseHTTPConnection) -> NoneType
.BaseHTTPConnection.is_closed : (self: _base_connection.BaseHTTPConnection) -> Bool
.BaseHTTPConnection.is_closed: Bool
.BaseHTTPConnection.is_connected : (self: _base_connection.BaseHTTPConnection) -> Bool
.BaseHTTPConnection.is_connected: Bool
.BaseHTTPConnection.has_connected_to_proxy : (self: _base_connection.BaseHTTPConnection) -> Bool
.BaseHTTPConnection.has_connected_to_proxy: Bool

.BaseHTTPSConnection: ClassType
_base_connection = pyimport "_base_connection"
.BaseHTTPSConnection <: .BaseHTTPConnection
.BaseHTTPSConnection.ssl_context: Never
.BaseHTTPSConnection.ca_cert_data: NoneType or global::Bytes or Str
.BaseHTTPSConnection.ca_cert_dir: NoneType or Str
.BaseHTTPSConnection.ca_certs: NoneType or Str
.BaseHTTPSConnection.ssl_minimum_version: NoneType or Int
.BaseHTTPSConnection.default_socket_options: Never
.BaseHTTPSConnection.assert_hostname: Never
.BaseHTTPSConnection.default_port: Never
.BaseHTTPSConnection.cert_file: NoneType or Str
.BaseHTTPSConnection.cert_reqs: NoneType or Int or Str
.BaseHTTPSConnection.ssl_version: NoneType or Int or Str
.BaseHTTPSConnection.assert_fingerprint: NoneType or Str
.BaseHTTPSConnection.key_file: NoneType or Str
.BaseHTTPSConnection.ssl_maximum_version: NoneType or Int
.BaseHTTPSConnection.key_password: NoneType or Str
.BaseHTTPSConnection.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, source_address: NoneType or global::Tuple([Str, Int]) := NoneType or global::Tuple([Str, Int]), blocksize: Int := Int, socket_options: NoneType or global::List(global::Tuple(global::Tuple([{Int}, {Int}, Obj])), _: Nat) := NoneType or global::List(global::Tuple(global::Tuple([{Int}, {Int}, Obj])), _: Nat), proxy: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: NoneType or _base_connection.ProxyConfig := NoneType or _base_connection.ProxyConfig, cert_reqs: NoneType or Int or Str := NoneType or Int or Str, assert_hostname: NoneType or Str := NoneType or Str, assert_fingerprint: NoneType or Str := NoneType or Str, server_hostname: NoneType or Str := NoneType or Str, ssl_context: Obj := Obj, ca_certs: NoneType or Str := NoneType or Str, ca_cert_dir: NoneType or Str := NoneType or Str, ca_cert_data: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, ssl_minimum_version: NoneType or Int := NoneType or Int, ssl_maximum_version: NoneType or Int := NoneType or Int, ssl_version: NoneType or Int or Str := NoneType or Int or Str, cert_file: NoneType or Str := NoneType or Str, key_file: NoneType or Str := NoneType or Str, key_password: NoneType or Str := NoneType or Str) -> _base_connection.BaseHTTPSConnection



