##[pylyzer] failed /home/jepi/Documents/NSDSYST-MCO2/.venv/lib/python3.12/site-packages/urllib3/connection.py 1752607604 42613
.___v_desugar_1: Never
.annotations: Never
.datetime: Never

.http: Never

.logging: Never

.os: Never

.re: Never

.socket: Never

.sys: Never

.threading: Never

.typing: Never

.warnings: Never

.___v_desugar_2: Never
._HTTPConnection: Never
.___v_desugar_3: Never
.HTTPException: Never
.___v_desugar_4: Never
.ResponseNotReady: Never
.___v_desugar_5: Never
.SocketTimeout: Never

.___v_desugar_6 = pyimport "response"
.response = pyimport "response"
.HTTPResponse: {response.HTTPResponse}
.___v_desugar_7 = pyimport "ssl_"
.ssl_ = pyimport "ssl_"
._TYPE_PEER_CERT_RET_DICT: Never
.___v_desugar_8 = pyimport "ssltransport"
.ssltransport = pyimport "ssltransport"
.SSLTransport: {ssltransport.SSLTransport}


.___v_desugar_9 = pyimport "_collections"
._collections = pyimport "_collections"
.HTTPHeaderDict: {_collections.HTTPHeaderDict}
.___v_desugar_10 = pyimport "__init__"
.__init__ = pyimport "__init__"
.http2_probe: Never
.___v_desugar_11 = pyimport "response"

.assert_header_parsing: (headers: Obj) -> NoneType
.___v_desugar_12 = pyimport "timeout"
.timeout = pyimport "timeout"
._DEFAULT_TIMEOUT: Never
._TYPE_TIMEOUT: Never
.Timeout: {timeout.Timeout}
.___v_desugar_13 = pyimport "util"
.util = pyimport "util"
.to_str: (x: global::Bytes or Str, encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str) -> Str
.___v_desugar_14 = pyimport "wait"
.wait = pyimport "wait"
.wait_for_read: (sock: Obj, timeout: Float or NoneType := Float or NoneType) -> Bool
.ssl: Never

.BaseSSLError: Never
.ssl: Never
.BaseSSLError: ClassType


.___v_desugar_15 = pyimport "_base_connection"
._base_connection = pyimport "_base_connection"
._TYPE_BODY: Never
.___v_desugar_16 = pyimport "_base_connection"

.ProxyConfig: {_base_connection.ProxyConfig}
.___v_desugar_17 = pyimport "_base_connection"

._ResponseOptions: Never
.___v_desugar_18 = pyimport "_version"
._version = pyimport "_version"
.__version__: {"2.5.0"}
.___v_desugar_19 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.ConnectTimeoutError: Never
.HeaderParsingError: Never
.NameResolutionError: Never
.NewConnectionError: Never
.ProxyError: Never
.SystemTimeWarning: Never
.___v_desugar_20 = pyimport "__init__"

.SKIP_HEADER: {"@@@SKIP_HEADER@@@"}
.SKIPPABLE_HEADERS: Never
.connection: Never
.ssl_: Never
.___v_desugar_21 = pyimport "request"
.request = pyimport "request"
.body_to_chunks: (body: Obj, method: Str, blocksize: Int) -> util.request.ChunksAndContentLength
.___v_desugar_22 = pyimport "ssl_"

._assert_fingerprint: (cert: NoneType or global::Bytes, fingerprint: Str) -> NoneType
.___v_desugar_23 = pyimport "ssl_"

.create_urllib3_context: (ssl_version: NoneType or Int := NoneType or Int, cert_reqs: NoneType or Int := NoneType or Int, options: NoneType or Int := NoneType or Int, ciphers: NoneType or Str := NoneType or Str, ssl_minimum_version: NoneType or Int := NoneType or Int, ssl_maximum_version: NoneType or Int := NoneType or Int, verify_flags: NoneType or Int := NoneType or Int) -> Never
.is_ipaddress: (hostname: global::Bytes or Str) -> Bool
.resolve_cert_reqs: (candidate: NoneType or Int or Str) -> Never
.resolve_ssl_version: (candidate: NoneType or Int or Str) -> Int
.ssl_wrap_socket: (sock: Obj, keyfile: NoneType or Str := NoneType or Str, certfile: NoneType or Str := NoneType or Str, cert_reqs: NoneType or Int := NoneType or Int, ca_certs: NoneType or Str := NoneType or Str, server_hostname: NoneType or Str := NoneType or Str, ssl_version: NoneType or Int := NoneType or Int, ciphers: NoneType or Str := NoneType or Str, ssl_context: Obj := Obj, ca_cert_dir: NoneType or Str := NoneType or Str, key_password: NoneType or Str := NoneType or Str, ca_cert_data: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, tls_in_tls: Obj := Obj) -> Never
.___v_desugar_24 = pyimport "ssl_match_hostname"
.ssl_match_hostname = pyimport "ssl_match_hostname"
.CertificateError: {util.ssl_match_hostname.CertificateError}
.match_hostname: (cert: Obj, hostname: Str, hostname_checks_common_name: Bool := Bool) -> NoneType
.___v_desugar_25 = pyimport "url"
.url = pyimport "url"
.Url: {util.url.Url}
.ConnectionError: {global::ConnectionError}
.BrokenPipeError: {global::BrokenPipeError}
.log: Never
.port_by_scheme: global::Dict!({{"http"}: {80}, {"https"}: {443}})
.RECENT_DATE: Never
._CONTAINS_CONTROL_CHAR_RE: Never
.HTTPConnection: ClassType
.HTTPConnection <: Never
.HTTPConnection._tunnel_scheme: NoneType or Str
.HTTPConnection._has_connected_to_proxy: Bool
.HTTPConnection.proxy_config: NoneType or _base_connection.ProxyConfig
.HTTPConnection.blocksize: Int
.HTTPConnection._response_options: Never
.HTTPConnection._tunnel_host: NoneType or Str
.HTTPConnection.socket_options: Never
.HTTPConnection.source_address: Never
.HTTPConnection._tunnel_port: NoneType or Int
.HTTPConnection.proxy: NoneType or util.url.Url
.HTTPConnection.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, source_address: NoneType or global::Tuple([Str, Int]) := NoneType or global::Tuple([Str, Int]), blocksize: Int := Int, socket_options: Obj := Obj, proxy: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: NoneType or _base_connection.ProxyConfig := NoneType or _base_connection.ProxyConfig) -> connection.HTTPConnection
.HTTPConnection.default_port: Never
.HTTPConnection.default_socket_options: Never
.HTTPConnection.is_verified: Bool
.HTTPConnection.proxy_is_verified: NoneType or Bool
.HTTPConnection.host : (self: connection.HTTPConnection) -> Str
.HTTPConnection.host: Str
.HTTPConnection.host: (self: connection.HTTPConnection, value: Str) -> NoneType
.HTTPConnection._new_conn: (self: connection.HTTPConnection) -> Never
.HTTPConnection.set_tunnel: (self: connection.HTTPSConnection, host: Str, port: NoneType or Int := NoneType or Int, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), scheme: Str := Str) -> NoneType
.HTTPConnection.connect: (self: connection.HTTPConnection) -> NoneType
.HTTPConnection.is_closed : (self: connection.HTTPConnection) -> Bool
.HTTPConnection.is_closed: Bool
.HTTPConnection.is_connected : (self: connection.HTTPConnection) -> Bool
.HTTPConnection.is_connected: Bool
.HTTPConnection.has_connected_to_proxy : (self: connection.HTTPConnection) -> Bool
.HTTPConnection.has_connected_to_proxy: Bool
.HTTPConnection.proxy_is_forwarding : (self: connection.HTTPConnection) -> Bool
.HTTPConnection.proxy_is_forwarding: Bool
.HTTPConnection.proxy_is_tunneling : (self: connection.HTTPConnection) -> Bool
.HTTPConnection.proxy_is_tunneling: Bool
.HTTPConnection.close: (self: connection.HTTPConnection) -> NoneType
.HTTPConnection.putrequest: (self: connection.HTTPConnection, method: Str, url: Str, skip_host: Bool := Bool, skip_accept_encoding: Bool := Bool) -> NoneType
.HTTPConnection.putheader: (self: connection.HTTPConnection, header: Str, *values: Str) -> NoneType
.HTTPConnection.request: (self: connection.HTTPConnection, method: Str, url: Str, body: Obj := Obj, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str), chunked: Bool := Bool, preload_content: Bool := Bool, decode_content: Bool := Bool, enforce_content_length: Bool := Bool) -> NoneType
.HTTPConnection.request_chunked: (self: connection.HTTPConnection, method: Str, url: Str, body: Obj := Obj, headers: NoneType or global::Mapping(Str, Str) := NoneType or global::Mapping(Str, Str)) -> NoneType
.HTTPConnection.getresponse: (self: connection.HTTPConnection) -> response.HTTPResponse

.HTTPSConnection: ClassType
connection = pyimport "connection"
.HTTPSConnection <: .HTTPConnection
.HTTPSConnection.ssl_context: Never
.HTTPSConnection.ca_cert_data: NoneType or global::Bytes or Str
.HTTPSConnection.ca_cert_dir: NoneType or Str
.HTTPSConnection.ssl_minimum_version: NoneType or Int
.HTTPSConnection.server_hostname: NoneType or Str
.HTTPSConnection.ca_certs: NoneType or Str
.HTTPSConnection.assert_hostname: Never
.HTTPSConnection._connect_callback: Never
.HTTPSConnection.cert_file: NoneType or Str
.HTTPSConnection.cert_reqs: NoneType or Int or Str
.HTTPSConnection.ssl_version: NoneType or Int or Str
.HTTPSConnection.key_file: NoneType or Str
.HTTPSConnection.assert_fingerprint: NoneType or Str
.HTTPSConnection.ssl_maximum_version: NoneType or Int
.HTTPSConnection.key_password: NoneType or Str
.HTTPSConnection.__call__: (host: Str, port: NoneType or Int := NoneType or Int, timeout: Obj := Obj, source_address: NoneType or global::Tuple([Str, Int]) := NoneType or global::Tuple([Str, Int]), blocksize: Int := Int, socket_options: Obj := Obj, proxy: NoneType or util.url.Url := NoneType or util.url.Url, proxy_config: NoneType or _base_connection.ProxyConfig := NoneType or _base_connection.ProxyConfig, cert_reqs: NoneType or Int or Str := NoneType or Int or Str, assert_hostname: NoneType or Str := NoneType or Str, assert_fingerprint: NoneType or Str := NoneType or Str, server_hostname: NoneType or Str := NoneType or Str, ssl_context: Obj := Obj, ca_certs: NoneType or Str := NoneType or Str, ca_cert_dir: NoneType or Str := NoneType or Str, ca_cert_data: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, ssl_minimum_version: NoneType or Int := NoneType or Int, ssl_maximum_version: NoneType or Int := NoneType or Int, ssl_version: NoneType or Int or Str := NoneType or Int or Str, cert_file: NoneType or Str := NoneType or Str, key_file: NoneType or Str := NoneType or Str, key_password: NoneType or Str := NoneType or Str) -> connection.HTTPSConnection
.HTTPSConnection.default_port: Never
.HTTPSConnection.cert_reqs: NoneType or Int or Str
.HTTPSConnection.ca_certs: NoneType or Str
.HTTPSConnection.ca_cert_dir: NoneType or Str
.HTTPSConnection.ca_cert_data: NoneType or global::Bytes or Str
.HTTPSConnection.ssl_version: NoneType or Int or Str
.HTTPSConnection.ssl_minimum_version: NoneType or Int
.HTTPSConnection.ssl_maximum_version: NoneType or Int
.HTTPSConnection.assert_fingerprint: NoneType or Str
.HTTPSConnection._connect_callback: NoneType or () -> NoneType
.HTTPSConnection.set_cert: (self: connection.HTTPSConnection, key_file: NoneType or Str := NoneType or Str, cert_file: NoneType or Str := NoneType or Str, cert_reqs: NoneType or Int or Str := NoneType or Int or Str, key_password: NoneType or Str := NoneType or Str, ca_certs: NoneType or Str := NoneType or Str, assert_hostname: NoneType or Str := NoneType or Str, assert_fingerprint: NoneType or Str := NoneType or Str, ca_cert_dir: NoneType or Str := NoneType or Str, ca_cert_data: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str) -> NoneType
.HTTPSConnection.connect: (self: connection.HTTPSConnection) -> NoneType
.HTTPSConnection._connect_tls_proxy: (self: connection.HTTPSConnection, hostname: Str, sock: Obj) -> Never

.Type__WrappedAndVerifiedSocket: ClassType
.Type__WrappedAndVerifiedSocket <: Never
.Type__WrappedAndVerifiedSocket.socket: Never
.Type__WrappedAndVerifiedSocket.is_verified: Bool

._ssl_wrap_socket_and_match_hostname: (sock: Obj, cert_reqs: NoneType or Int or Str, ssl_version: NoneType or Int or Str, ssl_minimum_version: NoneType or Int, ssl_maximum_version: NoneType or Int, cert_file: NoneType or Str, key_file: NoneType or Str, key_password: NoneType or Str, ca_certs: NoneType or Str, ca_cert_dir: NoneType or Str, ca_cert_data: NoneType or global::Bytes or Str, assert_hostname: NoneType or Str, assert_fingerprint: NoneType or Str, server_hostname: NoneType or Str, ssl_context: Obj, tls_in_tls: Bool := Bool) -> Never
._match_hostname: (cert: Obj, asserted_hostname: Str, hostname_checks_common_name: Bool := Bool) -> NoneType
._wrap_proxy_error: (err: global::Exception, proxy_scheme: NoneType or Str) -> Never
._get_default_user_agent: () -> Str
.DummyConnection: ClassType
.DummyConnection.__call__: () -> connection.DummyConnection





.VerifiedHTTPSConnection: {connection.HTTPSConnection}
._url_from_connection: (conn: connection.HTTPConnection, path: NoneType or Str := NoneType or Str) -> Str
